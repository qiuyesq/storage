// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/configuration/grpc/grpc.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct ClientConfiguration {
    // message fields
    pub address: ::std::string::String,
    pub tls: ::protobuf::SingularPtrField<super::tls::ClientConfiguration>,
    pub keepalive: ::protobuf::SingularPtrField<ClientKeepaliveConfiguration>,
    pub forward_metadata: ::protobuf::RepeatedField<::std::string::String>,
    pub add_metadata: ::protobuf::RepeatedField<ClientConfiguration_HeaderValues>,
    pub oauth: ::protobuf::SingularPtrField<ClientOAuthConfiguration>,
    pub initial_window_size_bytes: i32,
    pub initial_conn_window_size_bytes: i32,
    pub proxy_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientConfiguration {
    fn default() -> &'a ClientConfiguration {
        <ClientConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ClientConfiguration {
    pub fn new() -> ClientConfiguration {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // .tls.ClientConfiguration tls = 2;


    pub fn get_tls(&self) -> &super::tls::ClientConfiguration {
        self.tls.as_ref().unwrap_or_else(|| super::tls::ClientConfiguration::default_instance())
    }
    pub fn clear_tls(&mut self) {
        self.tls.clear();
    }

    pub fn has_tls(&self) -> bool {
        self.tls.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tls(&mut self, v: super::tls::ClientConfiguration) {
        self.tls = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls(&mut self) -> &mut super::tls::ClientConfiguration {
        if self.tls.is_none() {
            self.tls.set_default();
        }
        self.tls.as_mut().unwrap()
    }

    // Take field
    pub fn take_tls(&mut self) -> super::tls::ClientConfiguration {
        self.tls.take().unwrap_or_else(|| super::tls::ClientConfiguration::new())
    }

    // .grpc.ClientKeepaliveConfiguration keepalive = 3;


    pub fn get_keepalive(&self) -> &ClientKeepaliveConfiguration {
        self.keepalive.as_ref().unwrap_or_else(|| ClientKeepaliveConfiguration::default_instance())
    }
    pub fn clear_keepalive(&mut self) {
        self.keepalive.clear();
    }

    pub fn has_keepalive(&self) -> bool {
        self.keepalive.is_some()
    }

    // Param is passed by value, moved
    pub fn set_keepalive(&mut self, v: ClientKeepaliveConfiguration) {
        self.keepalive = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_keepalive(&mut self) -> &mut ClientKeepaliveConfiguration {
        if self.keepalive.is_none() {
            self.keepalive.set_default();
        }
        self.keepalive.as_mut().unwrap()
    }

    // Take field
    pub fn take_keepalive(&mut self) -> ClientKeepaliveConfiguration {
        self.keepalive.take().unwrap_or_else(|| ClientKeepaliveConfiguration::new())
    }

    // repeated string forward_metadata = 4;


    pub fn get_forward_metadata(&self) -> &[::std::string::String] {
        &self.forward_metadata
    }
    pub fn clear_forward_metadata(&mut self) {
        self.forward_metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_forward_metadata(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.forward_metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_forward_metadata(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.forward_metadata
    }

    // Take field
    pub fn take_forward_metadata(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.forward_metadata, ::protobuf::RepeatedField::new())
    }

    // repeated .grpc.ClientConfiguration.HeaderValues add_metadata = 5;


    pub fn get_add_metadata(&self) -> &[ClientConfiguration_HeaderValues] {
        &self.add_metadata
    }
    pub fn clear_add_metadata(&mut self) {
        self.add_metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_metadata(&mut self, v: ::protobuf::RepeatedField<ClientConfiguration_HeaderValues>) {
        self.add_metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_add_metadata(&mut self) -> &mut ::protobuf::RepeatedField<ClientConfiguration_HeaderValues> {
        &mut self.add_metadata
    }

    // Take field
    pub fn take_add_metadata(&mut self) -> ::protobuf::RepeatedField<ClientConfiguration_HeaderValues> {
        ::std::mem::replace(&mut self.add_metadata, ::protobuf::RepeatedField::new())
    }

    // .grpc.ClientOAuthConfiguration oauth = 6;


    pub fn get_oauth(&self) -> &ClientOAuthConfiguration {
        self.oauth.as_ref().unwrap_or_else(|| ClientOAuthConfiguration::default_instance())
    }
    pub fn clear_oauth(&mut self) {
        self.oauth.clear();
    }

    pub fn has_oauth(&self) -> bool {
        self.oauth.is_some()
    }

    // Param is passed by value, moved
    pub fn set_oauth(&mut self, v: ClientOAuthConfiguration) {
        self.oauth = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oauth(&mut self) -> &mut ClientOAuthConfiguration {
        if self.oauth.is_none() {
            self.oauth.set_default();
        }
        self.oauth.as_mut().unwrap()
    }

    // Take field
    pub fn take_oauth(&mut self) -> ClientOAuthConfiguration {
        self.oauth.take().unwrap_or_else(|| ClientOAuthConfiguration::new())
    }

    // int32 initial_window_size_bytes = 8;


    pub fn get_initial_window_size_bytes(&self) -> i32 {
        self.initial_window_size_bytes
    }
    pub fn clear_initial_window_size_bytes(&mut self) {
        self.initial_window_size_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_initial_window_size_bytes(&mut self, v: i32) {
        self.initial_window_size_bytes = v;
    }

    // int32 initial_conn_window_size_bytes = 9;


    pub fn get_initial_conn_window_size_bytes(&self) -> i32 {
        self.initial_conn_window_size_bytes
    }
    pub fn clear_initial_conn_window_size_bytes(&mut self) {
        self.initial_conn_window_size_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_initial_conn_window_size_bytes(&mut self, v: i32) {
        self.initial_conn_window_size_bytes = v;
    }

    // string proxy_url = 10;


    pub fn get_proxy_url(&self) -> &str {
        &self.proxy_url
    }
    pub fn clear_proxy_url(&mut self) {
        self.proxy_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_proxy_url(&mut self, v: ::std::string::String) {
        self.proxy_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proxy_url(&mut self) -> &mut ::std::string::String {
        &mut self.proxy_url
    }

    // Take field
    pub fn take_proxy_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.proxy_url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.tls {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.keepalive {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.add_metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.oauth {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tls)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.keepalive)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.forward_metadata)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.add_metadata)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.oauth)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.initial_window_size_bytes = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.initial_conn_window_size_bytes = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.proxy_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(ref v) = self.tls.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.keepalive.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.forward_metadata {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.add_metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.oauth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.initial_window_size_bytes != 0 {
            my_size += ::protobuf::rt::value_size(8, self.initial_window_size_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.initial_conn_window_size_bytes != 0 {
            my_size += ::protobuf::rt::value_size(9, self.initial_conn_window_size_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.proxy_url.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.proxy_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(ref v) = self.tls.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.keepalive.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.forward_metadata {
            os.write_string(4, &v)?;
        };
        for v in &self.add_metadata {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.oauth.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.initial_window_size_bytes != 0 {
            os.write_int32(8, self.initial_window_size_bytes)?;
        }
        if self.initial_conn_window_size_bytes != 0 {
            os.write_int32(9, self.initial_conn_window_size_bytes)?;
        }
        if !self.proxy_url.is_empty() {
            os.write_string(10, &self.proxy_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientConfiguration {
        ClientConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &ClientConfiguration| { &m.address },
                    |m: &mut ClientConfiguration| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tls::ClientConfiguration>>(
                    "tls",
                    |m: &ClientConfiguration| { &m.tls },
                    |m: &mut ClientConfiguration| { &mut m.tls },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientKeepaliveConfiguration>>(
                    "keepalive",
                    |m: &ClientConfiguration| { &m.keepalive },
                    |m: &mut ClientConfiguration| { &mut m.keepalive },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "forward_metadata",
                    |m: &ClientConfiguration| { &m.forward_metadata },
                    |m: &mut ClientConfiguration| { &mut m.forward_metadata },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientConfiguration_HeaderValues>>(
                    "add_metadata",
                    |m: &ClientConfiguration| { &m.add_metadata },
                    |m: &mut ClientConfiguration| { &mut m.add_metadata },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientOAuthConfiguration>>(
                    "oauth",
                    |m: &ClientConfiguration| { &m.oauth },
                    |m: &mut ClientConfiguration| { &mut m.oauth },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "initial_window_size_bytes",
                    |m: &ClientConfiguration| { &m.initial_window_size_bytes },
                    |m: &mut ClientConfiguration| { &mut m.initial_window_size_bytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "initial_conn_window_size_bytes",
                    |m: &ClientConfiguration| { &m.initial_conn_window_size_bytes },
                    |m: &mut ClientConfiguration| { &mut m.initial_conn_window_size_bytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "proxy_url",
                    |m: &ClientConfiguration| { &m.proxy_url },
                    |m: &mut ClientConfiguration| { &mut m.proxy_url },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientConfiguration>(
                    "ClientConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ClientConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientConfiguration,
        };
        unsafe {
            instance.get(ClientConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ClientConfiguration {
    fn clear(&mut self) {
        self.address.clear();
        self.tls.clear();
        self.keepalive.clear();
        self.forward_metadata.clear();
        self.add_metadata.clear();
        self.oauth.clear();
        self.initial_window_size_bytes = 0;
        self.initial_conn_window_size_bytes = 0;
        self.proxy_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientConfiguration_HeaderValues {
    // message fields
    pub header: ::std::string::String,
    pub values: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientConfiguration_HeaderValues {
    fn default() -> &'a ClientConfiguration_HeaderValues {
        <ClientConfiguration_HeaderValues as ::protobuf::Message>::default_instance()
    }
}

impl ClientConfiguration_HeaderValues {
    pub fn new() -> ClientConfiguration_HeaderValues {
        ::std::default::Default::default()
    }

    // string header = 1;


    pub fn get_header(&self) -> &str {
        &self.header
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ::std::string::String) {
        self.header = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut ::std::string::String {
        &mut self.header
    }

    // Take field
    pub fn take_header(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.header, ::std::string::String::new())
    }

    // repeated string values = 2;


    pub fn get_values(&self) -> &[::std::string::String] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientConfiguration_HeaderValues {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.header.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.header);
        }
        for value in &self.values {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.header.is_empty() {
            os.write_string(1, &self.header)?;
        }
        for v in &self.values {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientConfiguration_HeaderValues {
        ClientConfiguration_HeaderValues::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "header",
                    |m: &ClientConfiguration_HeaderValues| { &m.header },
                    |m: &mut ClientConfiguration_HeaderValues| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "values",
                    |m: &ClientConfiguration_HeaderValues| { &m.values },
                    |m: &mut ClientConfiguration_HeaderValues| { &mut m.values },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientConfiguration_HeaderValues>(
                    "ClientConfiguration_HeaderValues",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientConfiguration_HeaderValues {
        static mut instance: ::protobuf::lazy::Lazy<ClientConfiguration_HeaderValues> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientConfiguration_HeaderValues,
        };
        unsafe {
            instance.get(ClientConfiguration_HeaderValues::new)
        }
    }
}

impl ::protobuf::Clear for ClientConfiguration_HeaderValues {
    fn clear(&mut self) {
        self.header.clear();
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientConfiguration_HeaderValues {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientConfiguration_HeaderValues {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientKeepaliveConfiguration {
    // message fields
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub permit_without_stream: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientKeepaliveConfiguration {
    fn default() -> &'a ClientKeepaliveConfiguration {
        <ClientKeepaliveConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ClientKeepaliveConfiguration {
    pub fn new() -> ClientKeepaliveConfiguration {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration time = 1;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Duration {
        self.time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Duration {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration timeout = 2;


    pub fn get_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.timeout.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_timeout(&mut self) {
        self.timeout.clear();
    }

    pub fn has_timeout(&self) -> bool {
        self.timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.timeout.is_none() {
            self.timeout.set_default();
        }
        self.timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // bool permit_without_stream = 3;


    pub fn get_permit_without_stream(&self) -> bool {
        self.permit_without_stream
    }
    pub fn clear_permit_without_stream(&mut self) {
        self.permit_without_stream = false;
    }

    // Param is passed by value, moved
    pub fn set_permit_without_stream(&mut self, v: bool) {
        self.permit_without_stream = v;
    }
}

impl ::protobuf::Message for ClientKeepaliveConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timeout)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.permit_without_stream = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.permit_without_stream != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.timeout.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.permit_without_stream != false {
            os.write_bool(3, self.permit_without_stream)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientKeepaliveConfiguration {
        ClientKeepaliveConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "time",
                    |m: &ClientKeepaliveConfiguration| { &m.time },
                    |m: &mut ClientKeepaliveConfiguration| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "timeout",
                    |m: &ClientKeepaliveConfiguration| { &m.timeout },
                    |m: &mut ClientKeepaliveConfiguration| { &mut m.timeout },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "permit_without_stream",
                    |m: &ClientKeepaliveConfiguration| { &m.permit_without_stream },
                    |m: &mut ClientKeepaliveConfiguration| { &mut m.permit_without_stream },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientKeepaliveConfiguration>(
                    "ClientKeepaliveConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientKeepaliveConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ClientKeepaliveConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientKeepaliveConfiguration,
        };
        unsafe {
            instance.get(ClientKeepaliveConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ClientKeepaliveConfiguration {
    fn clear(&mut self) {
        self.time.clear();
        self.timeout.clear();
        self.permit_without_stream = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientKeepaliveConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientKeepaliveConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientOAuthConfiguration {
    // message fields
    pub scopes: ::protobuf::RepeatedField<::std::string::String>,
    // message oneof groups
    pub credentials: ::std::option::Option<ClientOAuthConfiguration_oneof_credentials>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientOAuthConfiguration {
    fn default() -> &'a ClientOAuthConfiguration {
        <ClientOAuthConfiguration as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientOAuthConfiguration_oneof_credentials {
    google_default_credentials(::protobuf::well_known_types::Empty),
    service_account_key(::std::string::String),
}

impl ClientOAuthConfiguration {
    pub fn new() -> ClientOAuthConfiguration {
        ::std::default::Default::default()
    }

    // .google.protobuf.Empty google_default_credentials = 1;


    pub fn get_google_default_credentials(&self) -> &::protobuf::well_known_types::Empty {
        match self.credentials {
            ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::google_default_credentials(ref v)) => v,
            _ => ::protobuf::well_known_types::Empty::default_instance(),
        }
    }
    pub fn clear_google_default_credentials(&mut self) {
        self.credentials = ::std::option::Option::None;
    }

    pub fn has_google_default_credentials(&self) -> bool {
        match self.credentials {
            ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::google_default_credentials(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_google_default_credentials(&mut self, v: ::protobuf::well_known_types::Empty) {
        self.credentials = ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::google_default_credentials(v))
    }

    // Mutable pointer to the field.
    pub fn mut_google_default_credentials(&mut self) -> &mut ::protobuf::well_known_types::Empty {
        if let ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::google_default_credentials(_)) = self.credentials {
        } else {
            self.credentials = ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::google_default_credentials(::protobuf::well_known_types::Empty::new()));
        }
        match self.credentials {
            ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::google_default_credentials(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_google_default_credentials(&mut self) -> ::protobuf::well_known_types::Empty {
        if self.has_google_default_credentials() {
            match self.credentials.take() {
                ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::google_default_credentials(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Empty::new()
        }
    }

    // string service_account_key = 2;


    pub fn get_service_account_key(&self) -> &str {
        match self.credentials {
            ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::service_account_key(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_service_account_key(&mut self) {
        self.credentials = ::std::option::Option::None;
    }

    pub fn has_service_account_key(&self) -> bool {
        match self.credentials {
            ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::service_account_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service_account_key(&mut self, v: ::std::string::String) {
        self.credentials = ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::service_account_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service_account_key(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::service_account_key(_)) = self.credentials {
        } else {
            self.credentials = ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::service_account_key(::std::string::String::new()));
        }
        match self.credentials {
            ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::service_account_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service_account_key(&mut self) -> ::std::string::String {
        if self.has_service_account_key() {
            match self.credentials.take() {
                ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::service_account_key(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // repeated string scopes = 3;


    pub fn get_scopes(&self) -> &[::std::string::String] {
        &self.scopes
    }
    pub fn clear_scopes(&mut self) {
        self.scopes.clear();
    }

    // Param is passed by value, moved
    pub fn set_scopes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.scopes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_scopes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.scopes
    }

    // Take field
    pub fn take_scopes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.scopes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientOAuthConfiguration {
    fn is_initialized(&self) -> bool {
        if let Some(ClientOAuthConfiguration_oneof_credentials::google_default_credentials(ref v)) = self.credentials {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credentials = ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::google_default_credentials(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credentials = ::std::option::Option::Some(ClientOAuthConfiguration_oneof_credentials::service_account_key(is.read_string()?));
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.scopes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.scopes {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if let ::std::option::Option::Some(ref v) = self.credentials {
            match v {
                &ClientOAuthConfiguration_oneof_credentials::google_default_credentials(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientOAuthConfiguration_oneof_credentials::service_account_key(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.scopes {
            os.write_string(3, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.credentials {
            match v {
                &ClientOAuthConfiguration_oneof_credentials::google_default_credentials(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientOAuthConfiguration_oneof_credentials::service_account_key(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientOAuthConfiguration {
        ClientOAuthConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Empty>(
                    "google_default_credentials",
                    ClientOAuthConfiguration::has_google_default_credentials,
                    ClientOAuthConfiguration::get_google_default_credentials,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "service_account_key",
                    ClientOAuthConfiguration::has_service_account_key,
                    ClientOAuthConfiguration::get_service_account_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "scopes",
                    |m: &ClientOAuthConfiguration| { &m.scopes },
                    |m: &mut ClientOAuthConfiguration| { &mut m.scopes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientOAuthConfiguration>(
                    "ClientOAuthConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientOAuthConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ClientOAuthConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientOAuthConfiguration,
        };
        unsafe {
            instance.get(ClientOAuthConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ClientOAuthConfiguration {
    fn clear(&mut self) {
        self.credentials = ::std::option::Option::None;
        self.credentials = ::std::option::Option::None;
        self.scopes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientOAuthConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientOAuthConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerConfiguration {
    // message fields
    pub listen_addresses: ::protobuf::RepeatedField<::std::string::String>,
    pub listen_paths: ::protobuf::RepeatedField<::std::string::String>,
    pub tls: ::protobuf::SingularPtrField<super::tls::ServerConfiguration>,
    pub authentication_policy: ::protobuf::SingularPtrField<AuthenticationPolicy>,
    pub maximum_received_message_size_bytes: i64,
    pub keepalive_enforcement_policy: ::protobuf::SingularPtrField<ServerKeepaliveEnforcementPolicy>,
    pub health_check_service: ::std::string::String,
    pub initial_window_size_bytes: i32,
    pub initial_conn_window_size_bytes: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerConfiguration {
    fn default() -> &'a ServerConfiguration {
        <ServerConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ServerConfiguration {
    pub fn new() -> ServerConfiguration {
        ::std::default::Default::default()
    }

    // repeated string listen_addresses = 1;


    pub fn get_listen_addresses(&self) -> &[::std::string::String] {
        &self.listen_addresses
    }
    pub fn clear_listen_addresses(&mut self) {
        self.listen_addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_listen_addresses(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.listen_addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_listen_addresses(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.listen_addresses
    }

    // Take field
    pub fn take_listen_addresses(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.listen_addresses, ::protobuf::RepeatedField::new())
    }

    // repeated string listen_paths = 2;


    pub fn get_listen_paths(&self) -> &[::std::string::String] {
        &self.listen_paths
    }
    pub fn clear_listen_paths(&mut self) {
        self.listen_paths.clear();
    }

    // Param is passed by value, moved
    pub fn set_listen_paths(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.listen_paths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_listen_paths(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.listen_paths
    }

    // Take field
    pub fn take_listen_paths(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.listen_paths, ::protobuf::RepeatedField::new())
    }

    // .tls.ServerConfiguration tls = 3;


    pub fn get_tls(&self) -> &super::tls::ServerConfiguration {
        self.tls.as_ref().unwrap_or_else(|| super::tls::ServerConfiguration::default_instance())
    }
    pub fn clear_tls(&mut self) {
        self.tls.clear();
    }

    pub fn has_tls(&self) -> bool {
        self.tls.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tls(&mut self, v: super::tls::ServerConfiguration) {
        self.tls = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls(&mut self) -> &mut super::tls::ServerConfiguration {
        if self.tls.is_none() {
            self.tls.set_default();
        }
        self.tls.as_mut().unwrap()
    }

    // Take field
    pub fn take_tls(&mut self) -> super::tls::ServerConfiguration {
        self.tls.take().unwrap_or_else(|| super::tls::ServerConfiguration::new())
    }

    // .grpc.AuthenticationPolicy authentication_policy = 4;


    pub fn get_authentication_policy(&self) -> &AuthenticationPolicy {
        self.authentication_policy.as_ref().unwrap_or_else(|| AuthenticationPolicy::default_instance())
    }
    pub fn clear_authentication_policy(&mut self) {
        self.authentication_policy.clear();
    }

    pub fn has_authentication_policy(&self) -> bool {
        self.authentication_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_authentication_policy(&mut self, v: AuthenticationPolicy) {
        self.authentication_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authentication_policy(&mut self) -> &mut AuthenticationPolicy {
        if self.authentication_policy.is_none() {
            self.authentication_policy.set_default();
        }
        self.authentication_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_authentication_policy(&mut self) -> AuthenticationPolicy {
        self.authentication_policy.take().unwrap_or_else(|| AuthenticationPolicy::new())
    }

    // int64 maximum_received_message_size_bytes = 5;


    pub fn get_maximum_received_message_size_bytes(&self) -> i64 {
        self.maximum_received_message_size_bytes
    }
    pub fn clear_maximum_received_message_size_bytes(&mut self) {
        self.maximum_received_message_size_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_maximum_received_message_size_bytes(&mut self, v: i64) {
        self.maximum_received_message_size_bytes = v;
    }

    // .grpc.ServerKeepaliveEnforcementPolicy keepalive_enforcement_policy = 6;


    pub fn get_keepalive_enforcement_policy(&self) -> &ServerKeepaliveEnforcementPolicy {
        self.keepalive_enforcement_policy.as_ref().unwrap_or_else(|| ServerKeepaliveEnforcementPolicy::default_instance())
    }
    pub fn clear_keepalive_enforcement_policy(&mut self) {
        self.keepalive_enforcement_policy.clear();
    }

    pub fn has_keepalive_enforcement_policy(&self) -> bool {
        self.keepalive_enforcement_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_keepalive_enforcement_policy(&mut self, v: ServerKeepaliveEnforcementPolicy) {
        self.keepalive_enforcement_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_keepalive_enforcement_policy(&mut self) -> &mut ServerKeepaliveEnforcementPolicy {
        if self.keepalive_enforcement_policy.is_none() {
            self.keepalive_enforcement_policy.set_default();
        }
        self.keepalive_enforcement_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_keepalive_enforcement_policy(&mut self) -> ServerKeepaliveEnforcementPolicy {
        self.keepalive_enforcement_policy.take().unwrap_or_else(|| ServerKeepaliveEnforcementPolicy::new())
    }

    // string health_check_service = 7;


    pub fn get_health_check_service(&self) -> &str {
        &self.health_check_service
    }
    pub fn clear_health_check_service(&mut self) {
        self.health_check_service.clear();
    }

    // Param is passed by value, moved
    pub fn set_health_check_service(&mut self, v: ::std::string::String) {
        self.health_check_service = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_health_check_service(&mut self) -> &mut ::std::string::String {
        &mut self.health_check_service
    }

    // Take field
    pub fn take_health_check_service(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.health_check_service, ::std::string::String::new())
    }

    // int32 initial_window_size_bytes = 8;


    pub fn get_initial_window_size_bytes(&self) -> i32 {
        self.initial_window_size_bytes
    }
    pub fn clear_initial_window_size_bytes(&mut self) {
        self.initial_window_size_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_initial_window_size_bytes(&mut self, v: i32) {
        self.initial_window_size_bytes = v;
    }

    // int32 initial_conn_window_size_bytes = 9;


    pub fn get_initial_conn_window_size_bytes(&self) -> i32 {
        self.initial_conn_window_size_bytes
    }
    pub fn clear_initial_conn_window_size_bytes(&mut self) {
        self.initial_conn_window_size_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_initial_conn_window_size_bytes(&mut self, v: i32) {
        self.initial_conn_window_size_bytes = v;
    }
}

impl ::protobuf::Message for ServerConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.tls {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.authentication_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.keepalive_enforcement_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.listen_addresses)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.listen_paths)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tls)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.authentication_policy)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maximum_received_message_size_bytes = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.keepalive_enforcement_policy)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.health_check_service)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.initial_window_size_bytes = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.initial_conn_window_size_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.listen_addresses {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.listen_paths {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(ref v) = self.tls.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.authentication_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.maximum_received_message_size_bytes != 0 {
            my_size += ::protobuf::rt::value_size(5, self.maximum_received_message_size_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.keepalive_enforcement_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.health_check_service.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.health_check_service);
        }
        if self.initial_window_size_bytes != 0 {
            my_size += ::protobuf::rt::value_size(8, self.initial_window_size_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.initial_conn_window_size_bytes != 0 {
            my_size += ::protobuf::rt::value_size(9, self.initial_conn_window_size_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.listen_addresses {
            os.write_string(1, &v)?;
        };
        for v in &self.listen_paths {
            os.write_string(2, &v)?;
        };
        if let Some(ref v) = self.tls.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.authentication_policy.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.maximum_received_message_size_bytes != 0 {
            os.write_int64(5, self.maximum_received_message_size_bytes)?;
        }
        if let Some(ref v) = self.keepalive_enforcement_policy.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.health_check_service.is_empty() {
            os.write_string(7, &self.health_check_service)?;
        }
        if self.initial_window_size_bytes != 0 {
            os.write_int32(8, self.initial_window_size_bytes)?;
        }
        if self.initial_conn_window_size_bytes != 0 {
            os.write_int32(9, self.initial_conn_window_size_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerConfiguration {
        ServerConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "listen_addresses",
                    |m: &ServerConfiguration| { &m.listen_addresses },
                    |m: &mut ServerConfiguration| { &mut m.listen_addresses },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "listen_paths",
                    |m: &ServerConfiguration| { &m.listen_paths },
                    |m: &mut ServerConfiguration| { &mut m.listen_paths },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tls::ServerConfiguration>>(
                    "tls",
                    |m: &ServerConfiguration| { &m.tls },
                    |m: &mut ServerConfiguration| { &mut m.tls },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AuthenticationPolicy>>(
                    "authentication_policy",
                    |m: &ServerConfiguration| { &m.authentication_policy },
                    |m: &mut ServerConfiguration| { &mut m.authentication_policy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maximum_received_message_size_bytes",
                    |m: &ServerConfiguration| { &m.maximum_received_message_size_bytes },
                    |m: &mut ServerConfiguration| { &mut m.maximum_received_message_size_bytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ServerKeepaliveEnforcementPolicy>>(
                    "keepalive_enforcement_policy",
                    |m: &ServerConfiguration| { &m.keepalive_enforcement_policy },
                    |m: &mut ServerConfiguration| { &mut m.keepalive_enforcement_policy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "health_check_service",
                    |m: &ServerConfiguration| { &m.health_check_service },
                    |m: &mut ServerConfiguration| { &mut m.health_check_service },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "initial_window_size_bytes",
                    |m: &ServerConfiguration| { &m.initial_window_size_bytes },
                    |m: &mut ServerConfiguration| { &mut m.initial_window_size_bytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "initial_conn_window_size_bytes",
                    |m: &ServerConfiguration| { &m.initial_conn_window_size_bytes },
                    |m: &mut ServerConfiguration| { &mut m.initial_conn_window_size_bytes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ServerConfiguration>(
                    "ServerConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ServerConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ServerConfiguration,
        };
        unsafe {
            instance.get(ServerConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ServerConfiguration {
    fn clear(&mut self) {
        self.listen_addresses.clear();
        self.listen_paths.clear();
        self.tls.clear();
        self.authentication_policy.clear();
        self.maximum_received_message_size_bytes = 0;
        self.keepalive_enforcement_policy.clear();
        self.health_check_service.clear();
        self.initial_window_size_bytes = 0;
        self.initial_conn_window_size_bytes = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerKeepaliveEnforcementPolicy {
    // message fields
    pub min_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub permit_without_stream: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerKeepaliveEnforcementPolicy {
    fn default() -> &'a ServerKeepaliveEnforcementPolicy {
        <ServerKeepaliveEnforcementPolicy as ::protobuf::Message>::default_instance()
    }
}

impl ServerKeepaliveEnforcementPolicy {
    pub fn new() -> ServerKeepaliveEnforcementPolicy {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration min_time = 1;


    pub fn get_min_time(&self) -> &::protobuf::well_known_types::Duration {
        self.min_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_min_time(&mut self) {
        self.min_time.clear();
    }

    pub fn has_min_time(&self) -> bool {
        self.min_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_time(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.min_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_min_time(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.min_time.is_none() {
            self.min_time.set_default();
        }
        self.min_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_min_time(&mut self) -> ::protobuf::well_known_types::Duration {
        self.min_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // bool permit_without_stream = 2;


    pub fn get_permit_without_stream(&self) -> bool {
        self.permit_without_stream
    }
    pub fn clear_permit_without_stream(&mut self) {
        self.permit_without_stream = false;
    }

    // Param is passed by value, moved
    pub fn set_permit_without_stream(&mut self, v: bool) {
        self.permit_without_stream = v;
    }
}

impl ::protobuf::Message for ServerKeepaliveEnforcementPolicy {
    fn is_initialized(&self) -> bool {
        for v in &self.min_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.min_time)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.permit_without_stream = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.min_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.permit_without_stream != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.min_time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.permit_without_stream != false {
            os.write_bool(2, self.permit_without_stream)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerKeepaliveEnforcementPolicy {
        ServerKeepaliveEnforcementPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "min_time",
                    |m: &ServerKeepaliveEnforcementPolicy| { &m.min_time },
                    |m: &mut ServerKeepaliveEnforcementPolicy| { &mut m.min_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "permit_without_stream",
                    |m: &ServerKeepaliveEnforcementPolicy| { &m.permit_without_stream },
                    |m: &mut ServerKeepaliveEnforcementPolicy| { &mut m.permit_without_stream },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ServerKeepaliveEnforcementPolicy>(
                    "ServerKeepaliveEnforcementPolicy",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerKeepaliveEnforcementPolicy {
        static mut instance: ::protobuf::lazy::Lazy<ServerKeepaliveEnforcementPolicy> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ServerKeepaliveEnforcementPolicy,
        };
        unsafe {
            instance.get(ServerKeepaliveEnforcementPolicy::new)
        }
    }
}

impl ::protobuf::Clear for ServerKeepaliveEnforcementPolicy {
    fn clear(&mut self) {
        self.min_time.clear();
        self.permit_without_stream = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerKeepaliveEnforcementPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerKeepaliveEnforcementPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticationPolicy {
    // message oneof groups
    pub policy: ::std::option::Option<AuthenticationPolicy_oneof_policy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticationPolicy {
    fn default() -> &'a AuthenticationPolicy {
        <AuthenticationPolicy as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AuthenticationPolicy_oneof_policy {
    allow(super::atruct::Value),
    any(AnyAuthenticationPolicy),
    deny(::std::string::String),
    tls_client_certificate(TLSClientCertificateAuthenticationPolicy),
    jwt(super::jwt::AuthorizationHeaderParserConfiguration),
}

impl AuthenticationPolicy {
    pub fn new() -> AuthenticationPolicy {
        ::std::default::Default::default()
    }

    // .struct.Value allow = 1;


    pub fn get_allow(&self) -> &super::atruct::Value {
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::allow(ref v)) => v,
            _ => super::atruct::Value::default_instance(),
        }
    }
    pub fn clear_allow(&mut self) {
        self.policy = ::std::option::Option::None;
    }

    pub fn has_allow(&self) -> bool {
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::allow(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_allow(&mut self, v: super::atruct::Value) {
        self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::allow(v))
    }

    // Mutable pointer to the field.
    pub fn mut_allow(&mut self) -> &mut super::atruct::Value {
        if let ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::allow(_)) = self.policy {
        } else {
            self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::allow(super::atruct::Value::new()));
        }
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::allow(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_allow(&mut self) -> super::atruct::Value {
        if self.has_allow() {
            match self.policy.take() {
                ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::allow(v)) => v,
                _ => panic!(),
            }
        } else {
            super::atruct::Value::new()
        }
    }

    // .grpc.AnyAuthenticationPolicy any = 2;


    pub fn get_any(&self) -> &AnyAuthenticationPolicy {
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::any(ref v)) => v,
            _ => AnyAuthenticationPolicy::default_instance(),
        }
    }
    pub fn clear_any(&mut self) {
        self.policy = ::std::option::Option::None;
    }

    pub fn has_any(&self) -> bool {
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::any(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_any(&mut self, v: AnyAuthenticationPolicy) {
        self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::any(v))
    }

    // Mutable pointer to the field.
    pub fn mut_any(&mut self) -> &mut AnyAuthenticationPolicy {
        if let ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::any(_)) = self.policy {
        } else {
            self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::any(AnyAuthenticationPolicy::new()));
        }
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::any(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_any(&mut self) -> AnyAuthenticationPolicy {
        if self.has_any() {
            match self.policy.take() {
                ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::any(v)) => v,
                _ => panic!(),
            }
        } else {
            AnyAuthenticationPolicy::new()
        }
    }

    // string deny = 3;


    pub fn get_deny(&self) -> &str {
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::deny(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_deny(&mut self) {
        self.policy = ::std::option::Option::None;
    }

    pub fn has_deny(&self) -> bool {
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::deny(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deny(&mut self, v: ::std::string::String) {
        self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::deny(v))
    }

    // Mutable pointer to the field.
    pub fn mut_deny(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::deny(_)) = self.policy {
        } else {
            self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::deny(::std::string::String::new()));
        }
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::deny(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_deny(&mut self) -> ::std::string::String {
        if self.has_deny() {
            match self.policy.take() {
                ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::deny(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .grpc.TLSClientCertificateAuthenticationPolicy tls_client_certificate = 4;


    pub fn get_tls_client_certificate(&self) -> &TLSClientCertificateAuthenticationPolicy {
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::tls_client_certificate(ref v)) => v,
            _ => TLSClientCertificateAuthenticationPolicy::default_instance(),
        }
    }
    pub fn clear_tls_client_certificate(&mut self) {
        self.policy = ::std::option::Option::None;
    }

    pub fn has_tls_client_certificate(&self) -> bool {
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::tls_client_certificate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tls_client_certificate(&mut self, v: TLSClientCertificateAuthenticationPolicy) {
        self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::tls_client_certificate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tls_client_certificate(&mut self) -> &mut TLSClientCertificateAuthenticationPolicy {
        if let ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::tls_client_certificate(_)) = self.policy {
        } else {
            self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::tls_client_certificate(TLSClientCertificateAuthenticationPolicy::new()));
        }
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::tls_client_certificate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tls_client_certificate(&mut self) -> TLSClientCertificateAuthenticationPolicy {
        if self.has_tls_client_certificate() {
            match self.policy.take() {
                ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::tls_client_certificate(v)) => v,
                _ => panic!(),
            }
        } else {
            TLSClientCertificateAuthenticationPolicy::new()
        }
    }

    // .jwt.AuthorizationHeaderParserConfiguration jwt = 5;


    pub fn get_jwt(&self) -> &super::jwt::AuthorizationHeaderParserConfiguration {
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::jwt(ref v)) => v,
            _ => super::jwt::AuthorizationHeaderParserConfiguration::default_instance(),
        }
    }
    pub fn clear_jwt(&mut self) {
        self.policy = ::std::option::Option::None;
    }

    pub fn has_jwt(&self) -> bool {
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::jwt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_jwt(&mut self, v: super::jwt::AuthorizationHeaderParserConfiguration) {
        self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::jwt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_jwt(&mut self) -> &mut super::jwt::AuthorizationHeaderParserConfiguration {
        if let ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::jwt(_)) = self.policy {
        } else {
            self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::jwt(super::jwt::AuthorizationHeaderParserConfiguration::new()));
        }
        match self.policy {
            ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::jwt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_jwt(&mut self) -> super::jwt::AuthorizationHeaderParserConfiguration {
        if self.has_jwt() {
            match self.policy.take() {
                ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::jwt(v)) => v,
                _ => panic!(),
            }
        } else {
            super::jwt::AuthorizationHeaderParserConfiguration::new()
        }
    }
}

impl ::protobuf::Message for AuthenticationPolicy {
    fn is_initialized(&self) -> bool {
        if let Some(AuthenticationPolicy_oneof_policy::allow(ref v)) = self.policy {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthenticationPolicy_oneof_policy::any(ref v)) = self.policy {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthenticationPolicy_oneof_policy::tls_client_certificate(ref v)) = self.policy {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthenticationPolicy_oneof_policy::jwt(ref v)) = self.policy {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::allow(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::any(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::deny(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::tls_client_certificate(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.policy = ::std::option::Option::Some(AuthenticationPolicy_oneof_policy::jwt(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.policy {
            match v {
                &AuthenticationPolicy_oneof_policy::allow(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthenticationPolicy_oneof_policy::any(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthenticationPolicy_oneof_policy::deny(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &AuthenticationPolicy_oneof_policy::tls_client_certificate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthenticationPolicy_oneof_policy::jwt(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.policy {
            match v {
                &AuthenticationPolicy_oneof_policy::allow(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthenticationPolicy_oneof_policy::any(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthenticationPolicy_oneof_policy::deny(ref v) => {
                    os.write_string(3, v)?;
                },
                &AuthenticationPolicy_oneof_policy::tls_client_certificate(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthenticationPolicy_oneof_policy::jwt(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticationPolicy {
        AuthenticationPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::atruct::Value>(
                    "allow",
                    AuthenticationPolicy::has_allow,
                    AuthenticationPolicy::get_allow,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AnyAuthenticationPolicy>(
                    "any",
                    AuthenticationPolicy::has_any,
                    AuthenticationPolicy::get_any,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "deny",
                    AuthenticationPolicy::has_deny,
                    AuthenticationPolicy::get_deny,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TLSClientCertificateAuthenticationPolicy>(
                    "tls_client_certificate",
                    AuthenticationPolicy::has_tls_client_certificate,
                    AuthenticationPolicy::get_tls_client_certificate,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::jwt::AuthorizationHeaderParserConfiguration>(
                    "jwt",
                    AuthenticationPolicy::has_jwt,
                    AuthenticationPolicy::get_jwt,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AuthenticationPolicy>(
                    "AuthenticationPolicy",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AuthenticationPolicy {
        static mut instance: ::protobuf::lazy::Lazy<AuthenticationPolicy> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AuthenticationPolicy,
        };
        unsafe {
            instance.get(AuthenticationPolicy::new)
        }
    }
}

impl ::protobuf::Clear for AuthenticationPolicy {
    fn clear(&mut self) {
        self.policy = ::std::option::Option::None;
        self.policy = ::std::option::Option::None;
        self.policy = ::std::option::Option::None;
        self.policy = ::std::option::Option::None;
        self.policy = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticationPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticationPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AnyAuthenticationPolicy {
    // message fields
    pub policies: ::protobuf::RepeatedField<AuthenticationPolicy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AnyAuthenticationPolicy {
    fn default() -> &'a AnyAuthenticationPolicy {
        <AnyAuthenticationPolicy as ::protobuf::Message>::default_instance()
    }
}

impl AnyAuthenticationPolicy {
    pub fn new() -> AnyAuthenticationPolicy {
        ::std::default::Default::default()
    }

    // repeated .grpc.AuthenticationPolicy policies = 1;


    pub fn get_policies(&self) -> &[AuthenticationPolicy] {
        &self.policies
    }
    pub fn clear_policies(&mut self) {
        self.policies.clear();
    }

    // Param is passed by value, moved
    pub fn set_policies(&mut self, v: ::protobuf::RepeatedField<AuthenticationPolicy>) {
        self.policies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_policies(&mut self) -> &mut ::protobuf::RepeatedField<AuthenticationPolicy> {
        &mut self.policies
    }

    // Take field
    pub fn take_policies(&mut self) -> ::protobuf::RepeatedField<AuthenticationPolicy> {
        ::std::mem::replace(&mut self.policies, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AnyAuthenticationPolicy {
    fn is_initialized(&self) -> bool {
        for v in &self.policies {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.policies)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.policies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.policies {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AnyAuthenticationPolicy {
        AnyAuthenticationPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AuthenticationPolicy>>(
                    "policies",
                    |m: &AnyAuthenticationPolicy| { &m.policies },
                    |m: &mut AnyAuthenticationPolicy| { &mut m.policies },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AnyAuthenticationPolicy>(
                    "AnyAuthenticationPolicy",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AnyAuthenticationPolicy {
        static mut instance: ::protobuf::lazy::Lazy<AnyAuthenticationPolicy> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AnyAuthenticationPolicy,
        };
        unsafe {
            instance.get(AnyAuthenticationPolicy::new)
        }
    }
}

impl ::protobuf::Clear for AnyAuthenticationPolicy {
    fn clear(&mut self) {
        self.policies.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AnyAuthenticationPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AnyAuthenticationPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TLSClientCertificateAuthenticationPolicy {
    // message fields
    pub client_certificate_authorities: ::std::string::String,
    pub metadata: ::protobuf::SingularPtrField<super::atruct::Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TLSClientCertificateAuthenticationPolicy {
    fn default() -> &'a TLSClientCertificateAuthenticationPolicy {
        <TLSClientCertificateAuthenticationPolicy as ::protobuf::Message>::default_instance()
    }
}

impl TLSClientCertificateAuthenticationPolicy {
    pub fn new() -> TLSClientCertificateAuthenticationPolicy {
        ::std::default::Default::default()
    }

    // string client_certificate_authorities = 1;


    pub fn get_client_certificate_authorities(&self) -> &str {
        &self.client_certificate_authorities
    }
    pub fn clear_client_certificate_authorities(&mut self) {
        self.client_certificate_authorities.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_certificate_authorities(&mut self, v: ::std::string::String) {
        self.client_certificate_authorities = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_certificate_authorities(&mut self) -> &mut ::std::string::String {
        &mut self.client_certificate_authorities
    }

    // Take field
    pub fn take_client_certificate_authorities(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_certificate_authorities, ::std::string::String::new())
    }

    // .struct.Value metadata = 2;


    pub fn get_metadata(&self) -> &super::atruct::Value {
        self.metadata.as_ref().unwrap_or_else(|| super::atruct::Value::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::atruct::Value) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::atruct::Value {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::atruct::Value {
        self.metadata.take().unwrap_or_else(|| super::atruct::Value::new())
    }
}

impl ::protobuf::Message for TLSClientCertificateAuthenticationPolicy {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_certificate_authorities)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_certificate_authorities.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_certificate_authorities);
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_certificate_authorities.is_empty() {
            os.write_string(1, &self.client_certificate_authorities)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TLSClientCertificateAuthenticationPolicy {
        TLSClientCertificateAuthenticationPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_certificate_authorities",
                    |m: &TLSClientCertificateAuthenticationPolicy| { &m.client_certificate_authorities },
                    |m: &mut TLSClientCertificateAuthenticationPolicy| { &mut m.client_certificate_authorities },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::atruct::Value>>(
                    "metadata",
                    |m: &TLSClientCertificateAuthenticationPolicy| { &m.metadata },
                    |m: &mut TLSClientCertificateAuthenticationPolicy| { &mut m.metadata },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TLSClientCertificateAuthenticationPolicy>(
                    "TLSClientCertificateAuthenticationPolicy",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TLSClientCertificateAuthenticationPolicy {
        static mut instance: ::protobuf::lazy::Lazy<TLSClientCertificateAuthenticationPolicy> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TLSClientCertificateAuthenticationPolicy,
        };
        unsafe {
            instance.get(TLSClientCertificateAuthenticationPolicy::new)
        }
    }
}

impl ::protobuf::Clear for TLSClientCertificateAuthenticationPolicy {
    fn clear(&mut self) {
        self.client_certificate_authorities.clear();
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TLSClientCertificateAuthenticationPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TLSClientCertificateAuthenticationPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#proto/configuration/grpc/grpc.proto\x12\x04grpc\x1a\x1egoogle/protobu\
    f/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a,proto/configurat\
    ion/grpc/struct/atruct.proto\x1a!proto/configuration/jwt/jwt.proto\x1a!p\
    roto/configuration/tls/tls.proto\"\xab\x04\n\x13ClientConfiguration\x12\
    \x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12*\n\x03tls\x18\x02\
    \x20\x01(\x0b2\x18.tls.ClientConfigurationR\x03tls\x12@\n\tkeepalive\x18\
    \x03\x20\x01(\x0b2\".grpc.ClientKeepaliveConfigurationR\tkeepalive\x12)\
    \n\x10forward_metadata\x18\x04\x20\x03(\tR\x0fforwardMetadata\x12I\n\x0c\
    add_metadata\x18\x05\x20\x03(\x0b2&.grpc.ClientConfiguration.HeaderValue\
    sR\x0baddMetadata\x124\n\x05oauth\x18\x06\x20\x01(\x0b2\x1e.grpc.ClientO\
    AuthConfigurationR\x05oauth\x129\n\x19initial_window_size_bytes\x18\x08\
    \x20\x01(\x05R\x16initialWindowSizeBytes\x12B\n\x1einitial_conn_window_s\
    ize_bytes\x18\t\x20\x01(\x05R\x1ainitialConnWindowSizeBytes\x12\x1b\n\tp\
    roxy_url\x18\n\x20\x01(\tR\x08proxyUrl\x1a>\n\x0cHeaderValues\x12\x16\n\
    \x06header\x18\x01\x20\x01(\tR\x06header\x12\x16\n\x06values\x18\x02\x20\
    \x03(\tR\x06valuesJ\x04\x08\x07\x10\x08\"\xb6\x01\n\x1cClientKeepaliveCo\
    nfiguration\x12-\n\x04time\x18\x01\x20\x01(\x0b2\x19.google.protobuf.Dur\
    ationR\x04time\x123\n\x07timeout\x18\x02\x20\x01(\x0b2\x19.google.protob\
    uf.DurationR\x07timeout\x122\n\x15permit_without_stream\x18\x03\x20\x01(\
    \x08R\x13permitWithoutStream\"\xcb\x01\n\x18ClientOAuthConfiguration\x12\
    V\n\x1agoogle_default_credentials\x18\x01\x20\x01(\x0b2\x16.google.proto\
    buf.EmptyH\0R\x18googleDefaultCredentials\x120\n\x13service_account_key\
    \x18\x02\x20\x01(\tH\0R\x11serviceAccountKey\x12\x16\n\x06scopes\x18\x03\
    \x20\x03(\tR\x06scopesB\r\n\x0bcredentials\"\xc9\x04\n\x13ServerConfigur\
    ation\x12)\n\x10listen_addresses\x18\x01\x20\x03(\tR\x0flistenAddresses\
    \x12!\n\x0clisten_paths\x18\x02\x20\x03(\tR\x0blistenPaths\x12*\n\x03tls\
    \x18\x03\x20\x01(\x0b2\x18.tls.ServerConfigurationR\x03tls\x12O\n\x15aut\
    hentication_policy\x18\x04\x20\x01(\x0b2\x1a.grpc.AuthenticationPolicyR\
    \x14authenticationPolicy\x12L\n#maximum_received_message_size_bytes\x18\
    \x05\x20\x01(\x03R\x1fmaximumReceivedMessageSizeBytes\x12h\n\x1ckeepaliv\
    e_enforcement_policy\x18\x06\x20\x01(\x0b2&.grpc.ServerKeepaliveEnforcem\
    entPolicyR\x1akeepaliveEnforcementPolicy\x120\n\x14health_check_service\
    \x18\x07\x20\x01(\tR\x12healthCheckService\x129\n\x19initial_window_size\
    _bytes\x18\x08\x20\x01(\x05R\x16initialWindowSizeBytes\x12B\n\x1einitial\
    _conn_window_size_bytes\x18\t\x20\x01(\x05R\x1ainitialConnWindowSizeByte\
    s\"\x8c\x01\n\x20ServerKeepaliveEnforcementPolicy\x124\n\x08min_time\x18\
    \x01\x20\x01(\x0b2\x19.google.protobuf.DurationR\x07minTime\x122\n\x15pe\
    rmit_without_stream\x18\x02\x20\x01(\x08R\x13permitWithoutStream\"\xb9\
    \x02\n\x14AuthenticationPolicy\x12%\n\x05allow\x18\x01\x20\x01(\x0b2\r.s\
    truct.ValueH\0R\x05allow\x121\n\x03any\x18\x02\x20\x01(\x0b2\x1d.grpc.An\
    yAuthenticationPolicyH\0R\x03any\x12\x14\n\x04deny\x18\x03\x20\x01(\tH\0\
    R\x04deny\x12f\n\x16tls_client_certificate\x18\x04\x20\x01(\x0b2..grpc.T\
    LSClientCertificateAuthenticationPolicyH\0R\x14tlsClientCertificate\x12?\
    \n\x03jwt\x18\x05\x20\x01(\x0b2+.jwt.AuthorizationHeaderParserConfigurat\
    ionH\0R\x03jwtB\x08\n\x06policy\"Q\n\x17AnyAuthenticationPolicy\x126\n\
    \x08policies\x18\x01\x20\x03(\x0b2\x1a.grpc.AuthenticationPolicyR\x08pol\
    icies\"\x9b\x01\n(TLSClientCertificateAuthenticationPolicy\x12D\n\x1ecli\
    ent_certificate_authorities\x18\x01\x20\x01(\tR\x1cclientCertificateAuth\
    orities\x12)\n\x08metadata\x18\x02\x20\x01(\x0b2\r.struct.ValueR\x08meta\
    datab\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
