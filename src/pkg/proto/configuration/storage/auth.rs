// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/configuration/auth/auth.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct AuthorizerConfiguration {
    // message oneof groups
    pub policy: ::std::option::Option<AuthorizerConfiguration_oneof_policy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthorizerConfiguration {
    fn default() -> &'a AuthorizerConfiguration {
        <AuthorizerConfiguration as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AuthorizerConfiguration_oneof_policy {
    allow(::protobuf::well_known_types::Empty),
    instance_name_prefix(InstanceNameAuthorizer),
    deny(::protobuf::well_known_types::Empty),
    jmespath_expression(::std::string::String),
}

impl AuthorizerConfiguration {
    pub fn new() -> AuthorizerConfiguration {
        ::std::default::Default::default()
    }

    // .google.protobuf.Empty allow = 1;


    pub fn get_allow(&self) -> &::protobuf::well_known_types::Empty {
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::allow(ref v)) => v,
            _ => ::protobuf::well_known_types::Empty::default_instance(),
        }
    }
    pub fn clear_allow(&mut self) {
        self.policy = ::std::option::Option::None;
    }

    pub fn has_allow(&self) -> bool {
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::allow(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_allow(&mut self, v: ::protobuf::well_known_types::Empty) {
        self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::allow(v))
    }

    // Mutable pointer to the field.
    pub fn mut_allow(&mut self) -> &mut ::protobuf::well_known_types::Empty {
        if let ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::allow(_)) = self.policy {
        } else {
            self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::allow(::protobuf::well_known_types::Empty::new()));
        }
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::allow(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_allow(&mut self) -> ::protobuf::well_known_types::Empty {
        if self.has_allow() {
            match self.policy.take() {
                ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::allow(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Empty::new()
        }
    }

    // .auth.InstanceNameAuthorizer instance_name_prefix = 2;


    pub fn get_instance_name_prefix(&self) -> &InstanceNameAuthorizer {
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::instance_name_prefix(ref v)) => v,
            _ => InstanceNameAuthorizer::default_instance(),
        }
    }
    pub fn clear_instance_name_prefix(&mut self) {
        self.policy = ::std::option::Option::None;
    }

    pub fn has_instance_name_prefix(&self) -> bool {
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::instance_name_prefix(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_instance_name_prefix(&mut self, v: InstanceNameAuthorizer) {
        self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::instance_name_prefix(v))
    }

    // Mutable pointer to the field.
    pub fn mut_instance_name_prefix(&mut self) -> &mut InstanceNameAuthorizer {
        if let ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::instance_name_prefix(_)) = self.policy {
        } else {
            self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::instance_name_prefix(InstanceNameAuthorizer::new()));
        }
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::instance_name_prefix(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_instance_name_prefix(&mut self) -> InstanceNameAuthorizer {
        if self.has_instance_name_prefix() {
            match self.policy.take() {
                ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::instance_name_prefix(v)) => v,
                _ => panic!(),
            }
        } else {
            InstanceNameAuthorizer::new()
        }
    }

    // .google.protobuf.Empty deny = 3;


    pub fn get_deny(&self) -> &::protobuf::well_known_types::Empty {
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::deny(ref v)) => v,
            _ => ::protobuf::well_known_types::Empty::default_instance(),
        }
    }
    pub fn clear_deny(&mut self) {
        self.policy = ::std::option::Option::None;
    }

    pub fn has_deny(&self) -> bool {
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::deny(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deny(&mut self, v: ::protobuf::well_known_types::Empty) {
        self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::deny(v))
    }

    // Mutable pointer to the field.
    pub fn mut_deny(&mut self) -> &mut ::protobuf::well_known_types::Empty {
        if let ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::deny(_)) = self.policy {
        } else {
            self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::deny(::protobuf::well_known_types::Empty::new()));
        }
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::deny(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_deny(&mut self) -> ::protobuf::well_known_types::Empty {
        if self.has_deny() {
            match self.policy.take() {
                ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::deny(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Empty::new()
        }
    }

    // string jmespath_expression = 4;


    pub fn get_jmespath_expression(&self) -> &str {
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::jmespath_expression(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_jmespath_expression(&mut self) {
        self.policy = ::std::option::Option::None;
    }

    pub fn has_jmespath_expression(&self) -> bool {
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::jmespath_expression(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_jmespath_expression(&mut self, v: ::std::string::String) {
        self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::jmespath_expression(v))
    }

    // Mutable pointer to the field.
    pub fn mut_jmespath_expression(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::jmespath_expression(_)) = self.policy {
        } else {
            self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::jmespath_expression(::std::string::String::new()));
        }
        match self.policy {
            ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::jmespath_expression(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_jmespath_expression(&mut self) -> ::std::string::String {
        if self.has_jmespath_expression() {
            match self.policy.take() {
                ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::jmespath_expression(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for AuthorizerConfiguration {
    fn is_initialized(&self) -> bool {
        if let Some(AuthorizerConfiguration_oneof_policy::allow(ref v)) = self.policy {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthorizerConfiguration_oneof_policy::instance_name_prefix(ref v)) = self.policy {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthorizerConfiguration_oneof_policy::deny(ref v)) = self.policy {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::allow(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::instance_name_prefix(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::deny(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.policy = ::std::option::Option::Some(AuthorizerConfiguration_oneof_policy::jmespath_expression(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.policy {
            match v {
                &AuthorizerConfiguration_oneof_policy::allow(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthorizerConfiguration_oneof_policy::instance_name_prefix(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthorizerConfiguration_oneof_policy::deny(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthorizerConfiguration_oneof_policy::jmespath_expression(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.policy {
            match v {
                &AuthorizerConfiguration_oneof_policy::allow(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthorizerConfiguration_oneof_policy::instance_name_prefix(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthorizerConfiguration_oneof_policy::deny(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthorizerConfiguration_oneof_policy::jmespath_expression(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthorizerConfiguration {
        AuthorizerConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Empty>(
                    "allow",
                    AuthorizerConfiguration::has_allow,
                    AuthorizerConfiguration::get_allow,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, InstanceNameAuthorizer>(
                    "instance_name_prefix",
                    AuthorizerConfiguration::has_instance_name_prefix,
                    AuthorizerConfiguration::get_instance_name_prefix,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Empty>(
                    "deny",
                    AuthorizerConfiguration::has_deny,
                    AuthorizerConfiguration::get_deny,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "jmespath_expression",
                    AuthorizerConfiguration::has_jmespath_expression,
                    AuthorizerConfiguration::get_jmespath_expression,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AuthorizerConfiguration>(
                    "AuthorizerConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AuthorizerConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<AuthorizerConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AuthorizerConfiguration,
        };
        unsafe {
            instance.get(AuthorizerConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for AuthorizerConfiguration {
    fn clear(&mut self) {
        self.policy = ::std::option::Option::None;
        self.policy = ::std::option::Option::None;
        self.policy = ::std::option::Option::None;
        self.policy = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthorizerConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizerConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstanceNameAuthorizer {
    // message fields
    pub allowed_instance_name_prefixes: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstanceNameAuthorizer {
    fn default() -> &'a InstanceNameAuthorizer {
        <InstanceNameAuthorizer as ::protobuf::Message>::default_instance()
    }
}

impl InstanceNameAuthorizer {
    pub fn new() -> InstanceNameAuthorizer {
        ::std::default::Default::default()
    }

    // repeated string allowed_instance_name_prefixes = 1;


    pub fn get_allowed_instance_name_prefixes(&self) -> &[::std::string::String] {
        &self.allowed_instance_name_prefixes
    }
    pub fn clear_allowed_instance_name_prefixes(&mut self) {
        self.allowed_instance_name_prefixes.clear();
    }

    // Param is passed by value, moved
    pub fn set_allowed_instance_name_prefixes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.allowed_instance_name_prefixes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allowed_instance_name_prefixes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.allowed_instance_name_prefixes
    }

    // Take field
    pub fn take_allowed_instance_name_prefixes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.allowed_instance_name_prefixes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for InstanceNameAuthorizer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.allowed_instance_name_prefixes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.allowed_instance_name_prefixes {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.allowed_instance_name_prefixes {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstanceNameAuthorizer {
        InstanceNameAuthorizer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "allowed_instance_name_prefixes",
                    |m: &InstanceNameAuthorizer| { &m.allowed_instance_name_prefixes },
                    |m: &mut InstanceNameAuthorizer| { &mut m.allowed_instance_name_prefixes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InstanceNameAuthorizer>(
                    "InstanceNameAuthorizer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InstanceNameAuthorizer {
        static mut instance: ::protobuf::lazy::Lazy<InstanceNameAuthorizer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InstanceNameAuthorizer,
        };
        unsafe {
            instance.get(InstanceNameAuthorizer::new)
        }
    }
}

impl ::protobuf::Clear for InstanceNameAuthorizer {
    fn clear(&mut self) {
        self.allowed_instance_name_prefixes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstanceNameAuthorizer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceNameAuthorizer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#proto/configuration/auth/auth.proto\x12\x04auth\x1a\x1bgoogle/protobu\
    f/empty.proto\"\x86\x02\n\x17AuthorizerConfiguration\x12.\n\x05allow\x18\
    \x01\x20\x01(\x0b2\x16.google.protobuf.EmptyH\0R\x05allow\x12P\n\x14inst\
    ance_name_prefix\x18\x02\x20\x01(\x0b2\x1c.auth.InstanceNameAuthorizerH\
    \0R\x12instanceNamePrefix\x12,\n\x04deny\x18\x03\x20\x01(\x0b2\x16.googl\
    e.protobuf.EmptyH\0R\x04deny\x121\n\x13jmespath_expression\x18\x04\x20\
    \x01(\tH\0R\x12jmespathExpressionB\x08\n\x06policy\"]\n\x16InstanceNameA\
    uthorizer\x12C\n\x1eallowed_instance_name_prefixes\x18\x01\x20\x03(\tR\
    \x1ballowedInstanceNamePrefixesb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
