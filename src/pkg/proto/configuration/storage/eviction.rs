// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/configuration/eviction/eviction.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CacheReplacementPolicy {
    UNKNOWN = 0,
    FIRST_IN_FIRST_OUT = 1,
    LEAST_RECENTLY_USED = 2,
    RANDOM_REPLACEMENT = 3,
}

impl ::protobuf::ProtobufEnum for CacheReplacementPolicy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CacheReplacementPolicy> {
        match value {
            0 => ::std::option::Option::Some(CacheReplacementPolicy::UNKNOWN),
            1 => ::std::option::Option::Some(CacheReplacementPolicy::FIRST_IN_FIRST_OUT),
            2 => ::std::option::Option::Some(CacheReplacementPolicy::LEAST_RECENTLY_USED),
            3 => ::std::option::Option::Some(CacheReplacementPolicy::RANDOM_REPLACEMENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CacheReplacementPolicy] = &[
            CacheReplacementPolicy::UNKNOWN,
            CacheReplacementPolicy::FIRST_IN_FIRST_OUT,
            CacheReplacementPolicy::LEAST_RECENTLY_USED,
            CacheReplacementPolicy::RANDOM_REPLACEMENT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CacheReplacementPolicy", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CacheReplacementPolicy {
}

impl ::std::default::Default for CacheReplacementPolicy {
    fn default() -> Self {
        CacheReplacementPolicy::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for CacheReplacementPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+proto/configuration/eviction/eviction.proto\x12\x08eviction*n\n\x16Ca\
    cheReplacementPolicy\x12\x0b\n\x07UNKNOWN\x10\0\x12\x16\n\x12FIRST_IN_FI\
    RST_OUT\x10\x01\x12\x17\n\x13LEAST_RECENTLY_USED\x10\x02\x12\x16\n\x12RA\
    NDOM_REPLACEMENT\x10\x03b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
