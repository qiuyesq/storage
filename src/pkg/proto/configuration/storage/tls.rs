// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/configuration/tls/tls.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct ClientConfiguration {
    // message fields
    pub server_certificate_authorities: ::std::string::String,
    pub client_certificate: ::std::string::String,
    pub client_private_key: ::std::string::String,
    pub cipher_suites: ::protobuf::RepeatedField<::std::string::String>,
    pub server_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientConfiguration {
    fn default() -> &'a ClientConfiguration {
        <ClientConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ClientConfiguration {
    pub fn new() -> ClientConfiguration {
        ::std::default::Default::default()
    }

    // string server_certificate_authorities = 1;


    pub fn get_server_certificate_authorities(&self) -> &str {
        &self.server_certificate_authorities
    }
    pub fn clear_server_certificate_authorities(&mut self) {
        self.server_certificate_authorities.clear();
    }

    // Param is passed by value, moved
    pub fn set_server_certificate_authorities(&mut self, v: ::std::string::String) {
        self.server_certificate_authorities = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_certificate_authorities(&mut self) -> &mut ::std::string::String {
        &mut self.server_certificate_authorities
    }

    // Take field
    pub fn take_server_certificate_authorities(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.server_certificate_authorities, ::std::string::String::new())
    }

    // string client_certificate = 2;


    pub fn get_client_certificate(&self) -> &str {
        &self.client_certificate
    }
    pub fn clear_client_certificate(&mut self) {
        self.client_certificate.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_certificate(&mut self, v: ::std::string::String) {
        self.client_certificate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_certificate(&mut self) -> &mut ::std::string::String {
        &mut self.client_certificate
    }

    // Take field
    pub fn take_client_certificate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_certificate, ::std::string::String::new())
    }

    // string client_private_key = 3;


    pub fn get_client_private_key(&self) -> &str {
        &self.client_private_key
    }
    pub fn clear_client_private_key(&mut self) {
        self.client_private_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_private_key(&mut self, v: ::std::string::String) {
        self.client_private_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_private_key(&mut self) -> &mut ::std::string::String {
        &mut self.client_private_key
    }

    // Take field
    pub fn take_client_private_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_private_key, ::std::string::String::new())
    }

    // repeated string cipher_suites = 4;


    pub fn get_cipher_suites(&self) -> &[::std::string::String] {
        &self.cipher_suites
    }
    pub fn clear_cipher_suites(&mut self) {
        self.cipher_suites.clear();
    }

    // Param is passed by value, moved
    pub fn set_cipher_suites(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.cipher_suites = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cipher_suites(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cipher_suites
    }

    // Take field
    pub fn take_cipher_suites(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.cipher_suites, ::protobuf::RepeatedField::new())
    }

    // string server_name = 5;


    pub fn get_server_name(&self) -> &str {
        &self.server_name
    }
    pub fn clear_server_name(&mut self) {
        self.server_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_server_name(&mut self, v: ::std::string::String) {
        self.server_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_name(&mut self) -> &mut ::std::string::String {
        &mut self.server_name
    }

    // Take field
    pub fn take_server_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.server_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientConfiguration {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.server_certificate_authorities)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_certificate)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_private_key)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cipher_suites)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.server_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.server_certificate_authorities.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.server_certificate_authorities);
        }
        if !self.client_certificate.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_certificate);
        }
        if !self.client_private_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.client_private_key);
        }
        for value in &self.cipher_suites {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.server_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.server_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.server_certificate_authorities.is_empty() {
            os.write_string(1, &self.server_certificate_authorities)?;
        }
        if !self.client_certificate.is_empty() {
            os.write_string(2, &self.client_certificate)?;
        }
        if !self.client_private_key.is_empty() {
            os.write_string(3, &self.client_private_key)?;
        }
        for v in &self.cipher_suites {
            os.write_string(4, &v)?;
        };
        if !self.server_name.is_empty() {
            os.write_string(5, &self.server_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientConfiguration {
        ClientConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "server_certificate_authorities",
                    |m: &ClientConfiguration| { &m.server_certificate_authorities },
                    |m: &mut ClientConfiguration| { &mut m.server_certificate_authorities },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_certificate",
                    |m: &ClientConfiguration| { &m.client_certificate },
                    |m: &mut ClientConfiguration| { &mut m.client_certificate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_private_key",
                    |m: &ClientConfiguration| { &m.client_private_key },
                    |m: &mut ClientConfiguration| { &mut m.client_private_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cipher_suites",
                    |m: &ClientConfiguration| { &m.cipher_suites },
                    |m: &mut ClientConfiguration| { &mut m.cipher_suites },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "server_name",
                    |m: &ClientConfiguration| { &m.server_name },
                    |m: &mut ClientConfiguration| { &mut m.server_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientConfiguration>(
                    "ClientConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ClientConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientConfiguration,
        };
        unsafe {
            instance.get(ClientConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ClientConfiguration {
    fn clear(&mut self) {
        self.server_certificate_authorities.clear();
        self.client_certificate.clear();
        self.client_private_key.clear();
        self.cipher_suites.clear();
        self.server_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerConfiguration {
    // message fields
    pub server_certificate: ::std::string::String,
    pub server_private_key: ::std::string::String,
    pub cipher_suites: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerConfiguration {
    fn default() -> &'a ServerConfiguration {
        <ServerConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ServerConfiguration {
    pub fn new() -> ServerConfiguration {
        ::std::default::Default::default()
    }

    // string server_certificate = 1;


    pub fn get_server_certificate(&self) -> &str {
        &self.server_certificate
    }
    pub fn clear_server_certificate(&mut self) {
        self.server_certificate.clear();
    }

    // Param is passed by value, moved
    pub fn set_server_certificate(&mut self, v: ::std::string::String) {
        self.server_certificate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_certificate(&mut self) -> &mut ::std::string::String {
        &mut self.server_certificate
    }

    // Take field
    pub fn take_server_certificate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.server_certificate, ::std::string::String::new())
    }

    // string server_private_key = 2;


    pub fn get_server_private_key(&self) -> &str {
        &self.server_private_key
    }
    pub fn clear_server_private_key(&mut self) {
        self.server_private_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_server_private_key(&mut self, v: ::std::string::String) {
        self.server_private_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_private_key(&mut self) -> &mut ::std::string::String {
        &mut self.server_private_key
    }

    // Take field
    pub fn take_server_private_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.server_private_key, ::std::string::String::new())
    }

    // repeated string cipher_suites = 3;


    pub fn get_cipher_suites(&self) -> &[::std::string::String] {
        &self.cipher_suites
    }
    pub fn clear_cipher_suites(&mut self) {
        self.cipher_suites.clear();
    }

    // Param is passed by value, moved
    pub fn set_cipher_suites(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.cipher_suites = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cipher_suites(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cipher_suites
    }

    // Take field
    pub fn take_cipher_suites(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.cipher_suites, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ServerConfiguration {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.server_certificate)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.server_private_key)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cipher_suites)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.server_certificate.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.server_certificate);
        }
        if !self.server_private_key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.server_private_key);
        }
        for value in &self.cipher_suites {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.server_certificate.is_empty() {
            os.write_string(1, &self.server_certificate)?;
        }
        if !self.server_private_key.is_empty() {
            os.write_string(2, &self.server_private_key)?;
        }
        for v in &self.cipher_suites {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerConfiguration {
        ServerConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "server_certificate",
                    |m: &ServerConfiguration| { &m.server_certificate },
                    |m: &mut ServerConfiguration| { &mut m.server_certificate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "server_private_key",
                    |m: &ServerConfiguration| { &m.server_private_key },
                    |m: &mut ServerConfiguration| { &mut m.server_private_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cipher_suites",
                    |m: &ServerConfiguration| { &m.cipher_suites },
                    |m: &mut ServerConfiguration| { &mut m.cipher_suites },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ServerConfiguration>(
                    "ServerConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ServerConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ServerConfiguration,
        };
        unsafe {
            instance.get(ServerConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ServerConfiguration {
    fn clear(&mut self) {
        self.server_certificate.clear();
        self.server_private_key.clear();
        self.cipher_suites.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!proto/configuration/tls/tls.proto\x12\x03tls\"\xfe\x01\n\x13ClientCon\
    figuration\x12D\n\x1eserver_certificate_authorities\x18\x01\x20\x01(\tR\
    \x1cserverCertificateAuthorities\x12-\n\x12client_certificate\x18\x02\
    \x20\x01(\tR\x11clientCertificate\x12,\n\x12client_private_key\x18\x03\
    \x20\x01(\tR\x10clientPrivateKey\x12#\n\rcipher_suites\x18\x04\x20\x03(\
    \tR\x0ccipherSuites\x12\x1f\n\x0bserver_name\x18\x05\x20\x01(\tR\nserver\
    Name\"\x97\x01\n\x13ServerConfiguration\x12-\n\x12server_certificate\x18\
    \x01\x20\x01(\tR\x11serverCertificate\x12,\n\x12server_private_key\x18\
    \x02\x20\x01(\tR\x10serverPrivateKey\x12#\n\rcipher_suites\x18\x03\x20\
    \x03(\tR\x0ccipherSuitesb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
