// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/configuration/storage/storage.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct ApplicationConfiguration {
    // message fields
    pub grpc_servers: ::protobuf::RepeatedField<super::grpc::ServerConfiguration>,
    pub schedulers: ::std::collections::HashMap<::std::string::String, super::builder::SchedulerConfiguration>,
    pub maximum_message_size_bytes: i64,
    pub global: ::protobuf::SingularPtrField<super::global::Configuration>,
    pub content_addressable_storage: ::protobuf::SingularPtrField<ScannableBlobAccessConfiguration>,
    pub action_cache: ::protobuf::SingularPtrField<NonScannableBlobAccessConfiguration>,
    pub indirect_content_addressable_storage: ::protobuf::SingularPtrField<ScannableBlobAccessConfiguration>,
    pub initial_size_class_cache: ::protobuf::SingularPtrField<NonScannableBlobAccessConfiguration>,
    pub execute_authorizer: ::protobuf::SingularPtrField<super::auth::AuthorizerConfiguration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApplicationConfiguration {
    fn default() -> &'a ApplicationConfiguration {
        <ApplicationConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ApplicationConfiguration {
    pub fn new() -> ApplicationConfiguration {
        ::std::default::Default::default()
    }

    // repeated .grpc.ServerConfiguration grpc_servers = 4;


    pub fn get_grpc_servers(&self) -> &[super::grpc::ServerConfiguration] {
        &self.grpc_servers
    }
    pub fn clear_grpc_servers(&mut self) {
        self.grpc_servers.clear();
    }

    // Param is passed by value, moved
    pub fn set_grpc_servers(&mut self, v: ::protobuf::RepeatedField<super::grpc::ServerConfiguration>) {
        self.grpc_servers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_grpc_servers(&mut self) -> &mut ::protobuf::RepeatedField<super::grpc::ServerConfiguration> {
        &mut self.grpc_servers
    }

    // Take field
    pub fn take_grpc_servers(&mut self) -> ::protobuf::RepeatedField<super::grpc::ServerConfiguration> {
        ::std::mem::replace(&mut self.grpc_servers, ::protobuf::RepeatedField::new())
    }

    // repeated .storage.ApplicationConfiguration.SchedulersEntry schedulers = 5;


    pub fn get_schedulers(&self) -> &::std::collections::HashMap<::std::string::String, super::builder::SchedulerConfiguration> {
        &self.schedulers
    }
    pub fn clear_schedulers(&mut self) {
        self.schedulers.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedulers(&mut self, v: ::std::collections::HashMap<::std::string::String, super::builder::SchedulerConfiguration>) {
        self.schedulers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_schedulers(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::builder::SchedulerConfiguration> {
        &mut self.schedulers
    }

    // Take field
    pub fn take_schedulers(&mut self) -> ::std::collections::HashMap<::std::string::String, super::builder::SchedulerConfiguration> {
        ::std::mem::replace(&mut self.schedulers, ::std::collections::HashMap::new())
    }

    // int64 maximum_message_size_bytes = 8;


    pub fn get_maximum_message_size_bytes(&self) -> i64 {
        self.maximum_message_size_bytes
    }
    pub fn clear_maximum_message_size_bytes(&mut self) {
        self.maximum_message_size_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_maximum_message_size_bytes(&mut self, v: i64) {
        self.maximum_message_size_bytes = v;
    }

    // .global.Configuration global = 9;


    pub fn get_global(&self) -> &super::global::Configuration {
        self.global.as_ref().unwrap_or_else(|| super::global::Configuration::default_instance())
    }
    pub fn clear_global(&mut self) {
        self.global.clear();
    }

    pub fn has_global(&self) -> bool {
        self.global.is_some()
    }

    // Param is passed by value, moved
    pub fn set_global(&mut self, v: super::global::Configuration) {
        self.global = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_global(&mut self) -> &mut super::global::Configuration {
        if self.global.is_none() {
            self.global.set_default();
        }
        self.global.as_mut().unwrap()
    }

    // Take field
    pub fn take_global(&mut self) -> super::global::Configuration {
        self.global.take().unwrap_or_else(|| super::global::Configuration::new())
    }

    // .storage.ScannableBlobAccessConfiguration content_addressable_storage = 17;


    pub fn get_content_addressable_storage(&self) -> &ScannableBlobAccessConfiguration {
        self.content_addressable_storage.as_ref().unwrap_or_else(|| ScannableBlobAccessConfiguration::default_instance())
    }
    pub fn clear_content_addressable_storage(&mut self) {
        self.content_addressable_storage.clear();
    }

    pub fn has_content_addressable_storage(&self) -> bool {
        self.content_addressable_storage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content_addressable_storage(&mut self, v: ScannableBlobAccessConfiguration) {
        self.content_addressable_storage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content_addressable_storage(&mut self) -> &mut ScannableBlobAccessConfiguration {
        if self.content_addressable_storage.is_none() {
            self.content_addressable_storage.set_default();
        }
        self.content_addressable_storage.as_mut().unwrap()
    }

    // Take field
    pub fn take_content_addressable_storage(&mut self) -> ScannableBlobAccessConfiguration {
        self.content_addressable_storage.take().unwrap_or_else(|| ScannableBlobAccessConfiguration::new())
    }

    // .storage.NonScannableBlobAccessConfiguration action_cache = 18;


    pub fn get_action_cache(&self) -> &NonScannableBlobAccessConfiguration {
        self.action_cache.as_ref().unwrap_or_else(|| NonScannableBlobAccessConfiguration::default_instance())
    }
    pub fn clear_action_cache(&mut self) {
        self.action_cache.clear();
    }

    pub fn has_action_cache(&self) -> bool {
        self.action_cache.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_cache(&mut self, v: NonScannableBlobAccessConfiguration) {
        self.action_cache = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_cache(&mut self) -> &mut NonScannableBlobAccessConfiguration {
        if self.action_cache.is_none() {
            self.action_cache.set_default();
        }
        self.action_cache.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_cache(&mut self) -> NonScannableBlobAccessConfiguration {
        self.action_cache.take().unwrap_or_else(|| NonScannableBlobAccessConfiguration::new())
    }

    // .storage.ScannableBlobAccessConfiguration indirect_content_addressable_storage = 10;


    pub fn get_indirect_content_addressable_storage(&self) -> &ScannableBlobAccessConfiguration {
        self.indirect_content_addressable_storage.as_ref().unwrap_or_else(|| ScannableBlobAccessConfiguration::default_instance())
    }
    pub fn clear_indirect_content_addressable_storage(&mut self) {
        self.indirect_content_addressable_storage.clear();
    }

    pub fn has_indirect_content_addressable_storage(&self) -> bool {
        self.indirect_content_addressable_storage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_indirect_content_addressable_storage(&mut self, v: ScannableBlobAccessConfiguration) {
        self.indirect_content_addressable_storage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_indirect_content_addressable_storage(&mut self) -> &mut ScannableBlobAccessConfiguration {
        if self.indirect_content_addressable_storage.is_none() {
            self.indirect_content_addressable_storage.set_default();
        }
        self.indirect_content_addressable_storage.as_mut().unwrap()
    }

    // Take field
    pub fn take_indirect_content_addressable_storage(&mut self) -> ScannableBlobAccessConfiguration {
        self.indirect_content_addressable_storage.take().unwrap_or_else(|| ScannableBlobAccessConfiguration::new())
    }

    // .storage.NonScannableBlobAccessConfiguration initial_size_class_cache = 11;


    pub fn get_initial_size_class_cache(&self) -> &NonScannableBlobAccessConfiguration {
        self.initial_size_class_cache.as_ref().unwrap_or_else(|| NonScannableBlobAccessConfiguration::default_instance())
    }
    pub fn clear_initial_size_class_cache(&mut self) {
        self.initial_size_class_cache.clear();
    }

    pub fn has_initial_size_class_cache(&self) -> bool {
        self.initial_size_class_cache.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial_size_class_cache(&mut self, v: NonScannableBlobAccessConfiguration) {
        self.initial_size_class_cache = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_size_class_cache(&mut self) -> &mut NonScannableBlobAccessConfiguration {
        if self.initial_size_class_cache.is_none() {
            self.initial_size_class_cache.set_default();
        }
        self.initial_size_class_cache.as_mut().unwrap()
    }

    // Take field
    pub fn take_initial_size_class_cache(&mut self) -> NonScannableBlobAccessConfiguration {
        self.initial_size_class_cache.take().unwrap_or_else(|| NonScannableBlobAccessConfiguration::new())
    }

    // .auth.AuthorizerConfiguration execute_authorizer = 16;


    pub fn get_execute_authorizer(&self) -> &super::auth::AuthorizerConfiguration {
        self.execute_authorizer.as_ref().unwrap_or_else(|| super::auth::AuthorizerConfiguration::default_instance())
    }
    pub fn clear_execute_authorizer(&mut self) {
        self.execute_authorizer.clear();
    }

    pub fn has_execute_authorizer(&self) -> bool {
        self.execute_authorizer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_execute_authorizer(&mut self, v: super::auth::AuthorizerConfiguration) {
        self.execute_authorizer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_execute_authorizer(&mut self) -> &mut super::auth::AuthorizerConfiguration {
        if self.execute_authorizer.is_none() {
            self.execute_authorizer.set_default();
        }
        self.execute_authorizer.as_mut().unwrap()
    }

    // Take field
    pub fn take_execute_authorizer(&mut self) -> super::auth::AuthorizerConfiguration {
        self.execute_authorizer.take().unwrap_or_else(|| super::auth::AuthorizerConfiguration::new())
    }
}

impl ::protobuf::Message for ApplicationConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.grpc_servers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.global {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.content_addressable_storage {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.action_cache {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.indirect_content_addressable_storage {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.initial_size_class_cache {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.execute_authorizer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.grpc_servers)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::builder::SchedulerConfiguration>>(wire_type, is, &mut self.schedulers)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maximum_message_size_bytes = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.global)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.content_addressable_storage)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_cache)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.indirect_content_addressable_storage)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.initial_size_class_cache)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.execute_authorizer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.grpc_servers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::builder::SchedulerConfiguration>>(5, &self.schedulers);
        if self.maximum_message_size_bytes != 0 {
            my_size += ::protobuf::rt::value_size(8, self.maximum_message_size_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.global.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.content_addressable_storage.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.action_cache.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.indirect_content_addressable_storage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.initial_size_class_cache.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.execute_authorizer.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.grpc_servers {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::builder::SchedulerConfiguration>>(5, &self.schedulers, os)?;
        if self.maximum_message_size_bytes != 0 {
            os.write_int64(8, self.maximum_message_size_bytes)?;
        }
        if let Some(ref v) = self.global.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.content_addressable_storage.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.action_cache.as_ref() {
            os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.indirect_content_addressable_storage.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.initial_size_class_cache.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.execute_authorizer.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApplicationConfiguration {
        ApplicationConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::grpc::ServerConfiguration>>(
                    "grpc_servers",
                    |m: &ApplicationConfiguration| { &m.grpc_servers },
                    |m: &mut ApplicationConfiguration| { &mut m.grpc_servers },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::builder::SchedulerConfiguration>>(
                    "schedulers",
                    |m: &ApplicationConfiguration| { &m.schedulers },
                    |m: &mut ApplicationConfiguration| { &mut m.schedulers },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maximum_message_size_bytes",
                    |m: &ApplicationConfiguration| { &m.maximum_message_size_bytes },
                    |m: &mut ApplicationConfiguration| { &mut m.maximum_message_size_bytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::global::Configuration>>(
                    "global",
                    |m: &ApplicationConfiguration| { &m.global },
                    |m: &mut ApplicationConfiguration| { &mut m.global },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ScannableBlobAccessConfiguration>>(
                    "content_addressable_storage",
                    |m: &ApplicationConfiguration| { &m.content_addressable_storage },
                    |m: &mut ApplicationConfiguration| { &mut m.content_addressable_storage },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NonScannableBlobAccessConfiguration>>(
                    "action_cache",
                    |m: &ApplicationConfiguration| { &m.action_cache },
                    |m: &mut ApplicationConfiguration| { &mut m.action_cache },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ScannableBlobAccessConfiguration>>(
                    "indirect_content_addressable_storage",
                    |m: &ApplicationConfiguration| { &m.indirect_content_addressable_storage },
                    |m: &mut ApplicationConfiguration| { &mut m.indirect_content_addressable_storage },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NonScannableBlobAccessConfiguration>>(
                    "initial_size_class_cache",
                    |m: &ApplicationConfiguration| { &m.initial_size_class_cache },
                    |m: &mut ApplicationConfiguration| { &mut m.initial_size_class_cache },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::auth::AuthorizerConfiguration>>(
                    "execute_authorizer",
                    |m: &ApplicationConfiguration| { &m.execute_authorizer },
                    |m: &mut ApplicationConfiguration| { &mut m.execute_authorizer },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApplicationConfiguration>(
                    "ApplicationConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApplicationConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ApplicationConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApplicationConfiguration,
        };
        unsafe {
            instance.get(ApplicationConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ApplicationConfiguration {
    fn clear(&mut self) {
        self.grpc_servers.clear();
        self.schedulers.clear();
        self.maximum_message_size_bytes = 0;
        self.global.clear();
        self.content_addressable_storage.clear();
        self.action_cache.clear();
        self.indirect_content_addressable_storage.clear();
        self.initial_size_class_cache.clear();
        self.execute_authorizer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApplicationConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApplicationConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NonScannableBlobAccessConfiguration {
    // message fields
    pub backend: ::protobuf::SingularPtrField<super::blobstore::BlobAccessConfiguration>,
    pub get_authorizer: ::protobuf::SingularPtrField<super::auth::AuthorizerConfiguration>,
    pub put_authorizer: ::protobuf::SingularPtrField<super::auth::AuthorizerConfiguration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NonScannableBlobAccessConfiguration {
    fn default() -> &'a NonScannableBlobAccessConfiguration {
        <NonScannableBlobAccessConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl NonScannableBlobAccessConfiguration {
    pub fn new() -> NonScannableBlobAccessConfiguration {
        ::std::default::Default::default()
    }

    // .blobstore.BlobAccessConfiguration backend = 1;


    pub fn get_backend(&self) -> &super::blobstore::BlobAccessConfiguration {
        self.backend.as_ref().unwrap_or_else(|| super::blobstore::BlobAccessConfiguration::default_instance())
    }
    pub fn clear_backend(&mut self) {
        self.backend.clear();
    }

    pub fn has_backend(&self) -> bool {
        self.backend.is_some()
    }

    // Param is passed by value, moved
    pub fn set_backend(&mut self, v: super::blobstore::BlobAccessConfiguration) {
        self.backend = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_backend(&mut self) -> &mut super::blobstore::BlobAccessConfiguration {
        if self.backend.is_none() {
            self.backend.set_default();
        }
        self.backend.as_mut().unwrap()
    }

    // Take field
    pub fn take_backend(&mut self) -> super::blobstore::BlobAccessConfiguration {
        self.backend.take().unwrap_or_else(|| super::blobstore::BlobAccessConfiguration::new())
    }

    // .auth.AuthorizerConfiguration get_authorizer = 2;


    pub fn get_get_authorizer(&self) -> &super::auth::AuthorizerConfiguration {
        self.get_authorizer.as_ref().unwrap_or_else(|| super::auth::AuthorizerConfiguration::default_instance())
    }
    pub fn clear_get_authorizer(&mut self) {
        self.get_authorizer.clear();
    }

    pub fn has_get_authorizer(&self) -> bool {
        self.get_authorizer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_get_authorizer(&mut self, v: super::auth::AuthorizerConfiguration) {
        self.get_authorizer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_get_authorizer(&mut self) -> &mut super::auth::AuthorizerConfiguration {
        if self.get_authorizer.is_none() {
            self.get_authorizer.set_default();
        }
        self.get_authorizer.as_mut().unwrap()
    }

    // Take field
    pub fn take_get_authorizer(&mut self) -> super::auth::AuthorizerConfiguration {
        self.get_authorizer.take().unwrap_or_else(|| super::auth::AuthorizerConfiguration::new())
    }

    // .auth.AuthorizerConfiguration put_authorizer = 3;


    pub fn get_put_authorizer(&self) -> &super::auth::AuthorizerConfiguration {
        self.put_authorizer.as_ref().unwrap_or_else(|| super::auth::AuthorizerConfiguration::default_instance())
    }
    pub fn clear_put_authorizer(&mut self) {
        self.put_authorizer.clear();
    }

    pub fn has_put_authorizer(&self) -> bool {
        self.put_authorizer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_put_authorizer(&mut self, v: super::auth::AuthorizerConfiguration) {
        self.put_authorizer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_put_authorizer(&mut self) -> &mut super::auth::AuthorizerConfiguration {
        if self.put_authorizer.is_none() {
            self.put_authorizer.set_default();
        }
        self.put_authorizer.as_mut().unwrap()
    }

    // Take field
    pub fn take_put_authorizer(&mut self) -> super::auth::AuthorizerConfiguration {
        self.put_authorizer.take().unwrap_or_else(|| super::auth::AuthorizerConfiguration::new())
    }
}

impl ::protobuf::Message for NonScannableBlobAccessConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.backend {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.get_authorizer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.put_authorizer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.backend)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.get_authorizer)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.put_authorizer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.backend.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.get_authorizer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.put_authorizer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.backend.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.get_authorizer.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.put_authorizer.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NonScannableBlobAccessConfiguration {
        NonScannableBlobAccessConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::blobstore::BlobAccessConfiguration>>(
                    "backend",
                    |m: &NonScannableBlobAccessConfiguration| { &m.backend },
                    |m: &mut NonScannableBlobAccessConfiguration| { &mut m.backend },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::auth::AuthorizerConfiguration>>(
                    "get_authorizer",
                    |m: &NonScannableBlobAccessConfiguration| { &m.get_authorizer },
                    |m: &mut NonScannableBlobAccessConfiguration| { &mut m.get_authorizer },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::auth::AuthorizerConfiguration>>(
                    "put_authorizer",
                    |m: &NonScannableBlobAccessConfiguration| { &m.put_authorizer },
                    |m: &mut NonScannableBlobAccessConfiguration| { &mut m.put_authorizer },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NonScannableBlobAccessConfiguration>(
                    "NonScannableBlobAccessConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NonScannableBlobAccessConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<NonScannableBlobAccessConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NonScannableBlobAccessConfiguration,
        };
        unsafe {
            instance.get(NonScannableBlobAccessConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for NonScannableBlobAccessConfiguration {
    fn clear(&mut self) {
        self.backend.clear();
        self.get_authorizer.clear();
        self.put_authorizer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NonScannableBlobAccessConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NonScannableBlobAccessConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScannableBlobAccessConfiguration {
    // message fields
    pub backend: ::protobuf::SingularPtrField<super::blobstore::BlobAccessConfiguration>,
    pub get_authorizer: ::protobuf::SingularPtrField<super::auth::AuthorizerConfiguration>,
    pub put_authorizer: ::protobuf::SingularPtrField<super::auth::AuthorizerConfiguration>,
    pub find_missing_authorizer: ::protobuf::SingularPtrField<super::auth::AuthorizerConfiguration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScannableBlobAccessConfiguration {
    fn default() -> &'a ScannableBlobAccessConfiguration {
        <ScannableBlobAccessConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ScannableBlobAccessConfiguration {
    pub fn new() -> ScannableBlobAccessConfiguration {
        ::std::default::Default::default()
    }

    // .blobstore.BlobAccessConfiguration backend = 1;


    pub fn get_backend(&self) -> &super::blobstore::BlobAccessConfiguration {
        self.backend.as_ref().unwrap_or_else(|| super::blobstore::BlobAccessConfiguration::default_instance())
    }
    pub fn clear_backend(&mut self) {
        self.backend.clear();
    }

    pub fn has_backend(&self) -> bool {
        self.backend.is_some()
    }

    // Param is passed by value, moved
    pub fn set_backend(&mut self, v: super::blobstore::BlobAccessConfiguration) {
        self.backend = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_backend(&mut self) -> &mut super::blobstore::BlobAccessConfiguration {
        if self.backend.is_none() {
            self.backend.set_default();
        }
        self.backend.as_mut().unwrap()
    }

    // Take field
    pub fn take_backend(&mut self) -> super::blobstore::BlobAccessConfiguration {
        self.backend.take().unwrap_or_else(|| super::blobstore::BlobAccessConfiguration::new())
    }

    // .auth.AuthorizerConfiguration get_authorizer = 2;


    pub fn get_get_authorizer(&self) -> &super::auth::AuthorizerConfiguration {
        self.get_authorizer.as_ref().unwrap_or_else(|| super::auth::AuthorizerConfiguration::default_instance())
    }
    pub fn clear_get_authorizer(&mut self) {
        self.get_authorizer.clear();
    }

    pub fn has_get_authorizer(&self) -> bool {
        self.get_authorizer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_get_authorizer(&mut self, v: super::auth::AuthorizerConfiguration) {
        self.get_authorizer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_get_authorizer(&mut self) -> &mut super::auth::AuthorizerConfiguration {
        if self.get_authorizer.is_none() {
            self.get_authorizer.set_default();
        }
        self.get_authorizer.as_mut().unwrap()
    }

    // Take field
    pub fn take_get_authorizer(&mut self) -> super::auth::AuthorizerConfiguration {
        self.get_authorizer.take().unwrap_or_else(|| super::auth::AuthorizerConfiguration::new())
    }

    // .auth.AuthorizerConfiguration put_authorizer = 3;


    pub fn get_put_authorizer(&self) -> &super::auth::AuthorizerConfiguration {
        self.put_authorizer.as_ref().unwrap_or_else(|| super::auth::AuthorizerConfiguration::default_instance())
    }
    pub fn clear_put_authorizer(&mut self) {
        self.put_authorizer.clear();
    }

    pub fn has_put_authorizer(&self) -> bool {
        self.put_authorizer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_put_authorizer(&mut self, v: super::auth::AuthorizerConfiguration) {
        self.put_authorizer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_put_authorizer(&mut self) -> &mut super::auth::AuthorizerConfiguration {
        if self.put_authorizer.is_none() {
            self.put_authorizer.set_default();
        }
        self.put_authorizer.as_mut().unwrap()
    }

    // Take field
    pub fn take_put_authorizer(&mut self) -> super::auth::AuthorizerConfiguration {
        self.put_authorizer.take().unwrap_or_else(|| super::auth::AuthorizerConfiguration::new())
    }

    // .auth.AuthorizerConfiguration find_missing_authorizer = 4;


    pub fn get_find_missing_authorizer(&self) -> &super::auth::AuthorizerConfiguration {
        self.find_missing_authorizer.as_ref().unwrap_or_else(|| super::auth::AuthorizerConfiguration::default_instance())
    }
    pub fn clear_find_missing_authorizer(&mut self) {
        self.find_missing_authorizer.clear();
    }

    pub fn has_find_missing_authorizer(&self) -> bool {
        self.find_missing_authorizer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_find_missing_authorizer(&mut self, v: super::auth::AuthorizerConfiguration) {
        self.find_missing_authorizer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_find_missing_authorizer(&mut self) -> &mut super::auth::AuthorizerConfiguration {
        if self.find_missing_authorizer.is_none() {
            self.find_missing_authorizer.set_default();
        }
        self.find_missing_authorizer.as_mut().unwrap()
    }

    // Take field
    pub fn take_find_missing_authorizer(&mut self) -> super::auth::AuthorizerConfiguration {
        self.find_missing_authorizer.take().unwrap_or_else(|| super::auth::AuthorizerConfiguration::new())
    }
}

impl ::protobuf::Message for ScannableBlobAccessConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.backend {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.get_authorizer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.put_authorizer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.find_missing_authorizer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.backend)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.get_authorizer)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.put_authorizer)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.find_missing_authorizer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.backend.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.get_authorizer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.put_authorizer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.find_missing_authorizer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.backend.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.get_authorizer.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.put_authorizer.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.find_missing_authorizer.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScannableBlobAccessConfiguration {
        ScannableBlobAccessConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::blobstore::BlobAccessConfiguration>>(
                    "backend",
                    |m: &ScannableBlobAccessConfiguration| { &m.backend },
                    |m: &mut ScannableBlobAccessConfiguration| { &mut m.backend },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::auth::AuthorizerConfiguration>>(
                    "get_authorizer",
                    |m: &ScannableBlobAccessConfiguration| { &m.get_authorizer },
                    |m: &mut ScannableBlobAccessConfiguration| { &mut m.get_authorizer },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::auth::AuthorizerConfiguration>>(
                    "put_authorizer",
                    |m: &ScannableBlobAccessConfiguration| { &m.put_authorizer },
                    |m: &mut ScannableBlobAccessConfiguration| { &mut m.put_authorizer },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::auth::AuthorizerConfiguration>>(
                    "find_missing_authorizer",
                    |m: &ScannableBlobAccessConfiguration| { &m.find_missing_authorizer },
                    |m: &mut ScannableBlobAccessConfiguration| { &mut m.find_missing_authorizer },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ScannableBlobAccessConfiguration>(
                    "ScannableBlobAccessConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ScannableBlobAccessConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ScannableBlobAccessConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ScannableBlobAccessConfiguration,
        };
        unsafe {
            instance.get(ScannableBlobAccessConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ScannableBlobAccessConfiguration {
    fn clear(&mut self) {
        self.backend.clear();
        self.get_authorizer.clear();
        self.put_authorizer.clear();
        self.find_missing_authorizer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScannableBlobAccessConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScannableBlobAccessConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)proto/configuration/storage/storage.proto\x12\x07storage\x1a#proto/co\
    nfiguration/auth/auth.proto\x1a-proto/configuration/blobstore/blobstore.\
    proto\x1a)proto/configuration/builder/builder.proto\x1a'proto/configurat\
    ion/global/global.proto\x1a#proto/configuration/grpc/grpc.proto\"\x9a\
    \x07\n\x18ApplicationConfiguration\x12<\n\x0cgrpc_servers\x18\x04\x20\
    \x03(\x0b2\x19.grpc.ServerConfigurationR\x0bgrpcServers\x12Q\n\nschedule\
    rs\x18\x05\x20\x03(\x0b21.storage.ApplicationConfiguration.SchedulersEnt\
    ryR\nschedulers\x12;\n\x1amaximum_message_size_bytes\x18\x08\x20\x01(\
    \x03R\x17maximumMessageSizeBytes\x12-\n\x06global\x18\t\x20\x01(\x0b2\
    \x15.global.ConfigurationR\x06global\x12i\n\x1bcontent_addressable_stora\
    ge\x18\x11\x20\x01(\x0b2).storage.ScannableBlobAccessConfigurationR\x19c\
    ontentAddressableStorage\x12O\n\x0caction_cache\x18\x12\x20\x01(\x0b2,.s\
    torage.NonScannableBlobAccessConfigurationR\x0bactionCache\x12z\n$indire\
    ct_content_addressable_storage\x18\n\x20\x01(\x0b2).storage.ScannableBlo\
    bAccessConfigurationR!indirectContentAddressableStorage\x12e\n\x18initia\
    l_size_class_cache\x18\x0b\x20\x01(\x0b2,.storage.NonScannableBlobAccess\
    ConfigurationR\x15initialSizeClassCache\x12L\n\x12execute_authorizer\x18\
    \x10\x20\x01(\x0b2\x1d.auth.AuthorizerConfigurationR\x11executeAuthorize\
    r\x1a^\n\x0fSchedulersEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x125\n\x05value\x18\x02\x20\x01(\x0b2\x1f.builder.SchedulerConfiguratio\
    nR\x05value:\x028\x01J\x04\x08\x01\x10\x02J\x04\x08\x02\x10\x03J\x04\x08\
    \x03\x10\x04J\x04\x08\x06\x10\x07J\x04\x08\x07\x10\x08J\x04\x08\x0c\x10\
    \rJ\x04\x08\r\x10\x0eJ\x04\x08\x0e\x10\x0fJ\x04\x08\x0f\x10\x10\"\xef\
    \x01\n#NonScannableBlobAccessConfiguration\x12<\n\x07backend\x18\x01\x20\
    \x01(\x0b2\".blobstore.BlobAccessConfigurationR\x07backend\x12D\n\x0eget\
    _authorizer\x18\x02\x20\x01(\x0b2\x1d.auth.AuthorizerConfigurationR\rget\
    Authorizer\x12D\n\x0eput_authorizer\x18\x03\x20\x01(\x0b2\x1d.auth.Autho\
    rizerConfigurationR\rputAuthorizer\"\xc3\x02\n\x20ScannableBlobAccessCon\
    figuration\x12<\n\x07backend\x18\x01\x20\x01(\x0b2\".blobstore.BlobAcces\
    sConfigurationR\x07backend\x12D\n\x0eget_authorizer\x18\x02\x20\x01(\x0b\
    2\x1d.auth.AuthorizerConfigurationR\rgetAuthorizer\x12D\n\x0eput_authori\
    zer\x18\x03\x20\x01(\x0b2\x1d.auth.AuthorizerConfigurationR\rputAuthoriz\
    er\x12U\n\x17find_missing_authorizer\x18\x04\x20\x01(\x0b2\x1d.auth.Auth\
    orizerConfigurationR\x15findMissingAuthorizerb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
