// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/configuration/digest/digest.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct ExistenceCacheConfiguration {
    // message fields
    pub cache_size: i64,
    pub cache_duration: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub cache_replacement_policy: super::eviction::CacheReplacementPolicy,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExistenceCacheConfiguration {
    fn default() -> &'a ExistenceCacheConfiguration {
        <ExistenceCacheConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ExistenceCacheConfiguration {
    pub fn new() -> ExistenceCacheConfiguration {
        ::std::default::Default::default()
    }

    // int64 cache_size = 1;


    pub fn get_cache_size(&self) -> i64 {
        self.cache_size
    }
    pub fn clear_cache_size(&mut self) {
        self.cache_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_cache_size(&mut self, v: i64) {
        self.cache_size = v;
    }

    // .google.protobuf.Duration cache_duration = 2;


    pub fn get_cache_duration(&self) -> &::protobuf::well_known_types::Duration {
        self.cache_duration.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_cache_duration(&mut self) {
        self.cache_duration.clear();
    }

    pub fn has_cache_duration(&self) -> bool {
        self.cache_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cache_duration(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.cache_duration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cache_duration(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.cache_duration.is_none() {
            self.cache_duration.set_default();
        }
        self.cache_duration.as_mut().unwrap()
    }

    // Take field
    pub fn take_cache_duration(&mut self) -> ::protobuf::well_known_types::Duration {
        self.cache_duration.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .eviction.CacheReplacementPolicy cache_replacement_policy = 3;


    pub fn get_cache_replacement_policy(&self) -> super::eviction::CacheReplacementPolicy {
        self.cache_replacement_policy
    }
    pub fn clear_cache_replacement_policy(&mut self) {
        self.cache_replacement_policy = super::eviction::CacheReplacementPolicy::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_cache_replacement_policy(&mut self, v: super::eviction::CacheReplacementPolicy) {
        self.cache_replacement_policy = v;
    }
}

impl ::protobuf::Message for ExistenceCacheConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.cache_duration {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cache_size = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cache_duration)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.cache_replacement_policy, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cache_size != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cache_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.cache_duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.cache_replacement_policy != super::eviction::CacheReplacementPolicy::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.cache_replacement_policy);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.cache_size != 0 {
            os.write_int64(1, self.cache_size)?;
        }
        if let Some(ref v) = self.cache_duration.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.cache_replacement_policy != super::eviction::CacheReplacementPolicy::UNKNOWN {
            os.write_enum(3, self.cache_replacement_policy.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExistenceCacheConfiguration {
        ExistenceCacheConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cache_size",
                    |m: &ExistenceCacheConfiguration| { &m.cache_size },
                    |m: &mut ExistenceCacheConfiguration| { &mut m.cache_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "cache_duration",
                    |m: &ExistenceCacheConfiguration| { &m.cache_duration },
                    |m: &mut ExistenceCacheConfiguration| { &mut m.cache_duration },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::eviction::CacheReplacementPolicy>>(
                    "cache_replacement_policy",
                    |m: &ExistenceCacheConfiguration| { &m.cache_replacement_policy },
                    |m: &mut ExistenceCacheConfiguration| { &mut m.cache_replacement_policy },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExistenceCacheConfiguration>(
                    "ExistenceCacheConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExistenceCacheConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ExistenceCacheConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExistenceCacheConfiguration,
        };
        unsafe {
            instance.get(ExistenceCacheConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ExistenceCacheConfiguration {
    fn clear(&mut self) {
        self.cache_size = 0;
        self.cache_duration.clear();
        self.cache_replacement_policy = super::eviction::CacheReplacementPolicy::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExistenceCacheConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExistenceCacheConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'proto/configuration/digest/digest.proto\x12\x06digest\x1a\x1egoogle/p\
    rotobuf/duration.proto\x1a+proto/configuration/eviction/eviction.proto\"\
    \xda\x01\n\x1bExistenceCacheConfiguration\x12\x1d\n\ncache_size\x18\x01\
    \x20\x01(\x03R\tcacheSize\x12@\n\x0ecache_duration\x18\x02\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\rcacheDuration\x12Z\n\x18cache_replacemen\
    t_policy\x18\x03\x20\x01(\x0e2\x20.eviction.CacheReplacementPolicyR\x16c\
    acheReplacementPolicyb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
